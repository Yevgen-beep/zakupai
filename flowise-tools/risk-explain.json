{
    "name": "Risk Explain",
    "version": "1.0.0",
    "description": "Explain risk factors and scores for tender lots with detailed analysis",
    "icon": "⚠️",
    "category": "Analysis",
    "type": "tool",
    "inputs": [
        {
            "name": "lotId",
            "type": "string",
            "label": "Lot ID",
            "description": "ID of the lot to analyze risk for",
            "required": true,
            "placeholder": "e.g., 12345"
        },
        {
            "name": "detailLevel",
            "type": "select",
            "label": "Detail Level",
            "description": "Level of detail in risk explanation",
            "options": [
                {
                    "label": "Summary",
                    "value": "summary"
                },
                {
                    "label": "Detailed",
                    "value": "detailed"
                },
                {
                    "label": "Full Analysis",
                    "value": "full"
                }
            ],
            "default": "detailed"
        },
        {
            "name": "language",
            "type": "select",
            "label": "Language",
            "description": "Language for risk explanation",
            "options": [
                {
                    "label": "Russian",
                    "value": "ru"
                },
                {
                    "label": "Kazakh",
                    "value": "kz"
                },
                {
                    "label": "English",
                    "value": "en"
                }
            ],
            "default": "ru"
        },
        {
            "name": "includeRecommendations",
            "type": "boolean",
            "label": "Include Recommendations",
            "description": "Include actionable recommendations to mitigate risks",
            "default": true
        },
        {
            "name": "includeHistorical",
            "type": "boolean",
            "label": "Include Historical Data",
            "description": "Include historical risk patterns and comparisons",
            "default": false
        },
        {
            "name": "formatOutput",
            "type": "select",
            "label": "Output Format",
            "description": "Format for the risk explanation",
            "options": [
                {
                    "label": "Plain Text",
                    "value": "text"
                },
                {
                    "label": "Markdown",
                    "value": "markdown"
                },
                {
                    "label": "HTML",
                    "value": "html"
                },
                {
                    "label": "JSON",
                    "value": "json"
                }
            ],
            "default": "markdown"
        }
    ],
    "outputs": [
        {
            "name": "riskExplanation",
            "type": "string",
            "description": "Formatted risk explanation"
        },
        {
            "name": "riskScore",
            "type": "number",
            "description": "Overall risk score (0-1)"
        },
        {
            "name": "riskFactors",
            "type": "array",
            "description": "List of identified risk factors"
        },
        {
            "name": "recommendations",
            "type": "array",
            "description": "Risk mitigation recommendations"
        },
        {
            "name": "metadata",
            "type": "object",
            "description": "Analysis metadata"
        }
    ],
    "code": "\nconst axios = require('axios');\n\nclass RiskExplainTool {\n    async execute(inputs) {\n        const {\n            lotId,\n            detailLevel,\n            language,\n            includeRecommendations,\n            includeHistorical,\n            formatOutput\n        } = inputs;\n\n        try {\n            // Get risk assessment from risk-engine\n            const riskData = await this.getRiskAssessment(lotId, language, detailLevel);\n\n            if (includeHistorical) {\n                riskData.historical = await this.getRiskHistory(lotId);\n            }\n\n            // Generate formatted explanation\n            const explanation = this.formatRiskExplanation(\n                riskData,\n                language,\n                detailLevel,\n                formatOutput\n            );\n\n            // Generate recommendations if requested\n            const recommendations = includeRecommendations ?\n                this.generateRecommendations(riskData, language) : [];\n\n            return {\n                riskExplanation: explanation,\n                riskScore: riskData.score || 0,\n                riskFactors: riskData.factors || [],\n                recommendations,\n                metadata: {\n                    lotId,\n                    language,\n                    detailLevel,\n                    format: formatOutput,\n                    analyzedAt: new Date().toISOString()\n                }\n            };\n        } catch (error) {\n            throw new Error(\\`Failed to explain risk for lot \\${lotId}: \\${error.message}\\`);\n        }\n    }\n\n    async getRiskAssessment(lotId, language, detailLevel) {\n        const baseUrl = process.env.ZAKUPAI_BASE_URL || 'http://localhost:8000';\n        const apiKey = process.env.ZAKUPAI_API_KEY || 'changeme';\n\n        try {\n            const response = await axios.get(\\`\\${baseUrl}/risk/explain/\\${lotId}\\`, {\n                params: {\n                    lang: language,\n                    detail: detailLevel\n                },\n                headers: { 'X-API-Key': apiKey }\n            });\n\n            return response.data;\n        } catch (error) {\n            // Fallback: get basic risk score\n            try {\n                const scoreResponse = await axios.post(\\`\\${baseUrl}/risk/score/\\${lotId}\\`, {\n                    include_explanation: true\n                }, {\n                    headers: { 'X-API-Key': apiKey }\n                });\n\n                return this.createDefaultExplanation(scoreResponse.data, lotId);\n            } catch (fallbackError) {\n                throw new Error(\\`Unable to get risk data: \\${error.message}\\`);\n            }\n        }\n    }\n\n    async getRiskHistory(lotId) {\n        const baseUrl = process.env.ZAKUPAI_BASE_URL || 'http://localhost:8000';\n        const apiKey = process.env.ZAKUPAI_API_KEY || 'changeme';\n\n        try {\n            const response = await axios.get(\\`\\${baseUrl}/risk/history/\\${lotId}\\`, {\n                params: { limit: 10 },\n                headers: { 'X-API-Key': apiKey }\n            });\n\n            return response.data;\n        } catch (error) {\n            console.warn(\\`Failed to get risk history: \\${error.message}\\`);\n            return [];\n        }\n    }\n\n    createDefaultExplanation(scoreData, lotId) {\n        return {\n            lotId: lotId,\n            score: scoreData.risk_score || 0,\n            factors: [\n                {\n                    name: \"price_competitiveness\",\n                    weight: 0.3,\n                    value: 0.5,\n                    description: \"Price competitiveness analysis\"\n                },\n                {\n                    name: \"customer_reliability\",\n                    weight: 0.25,\n                    value: 0.7,\n                    description: \"Customer payment reliability\"\n                },\n                {\n                    name: \"timeline_risk\",\n                    weight: 0.2,\n                    value: 0.4,\n                    description: \"Project timeline feasibility\"\n                },\n                {\n                    name: \"technical_complexity\",\n                    weight: 0.25,\n                    value: 0.6,\n                    description: \"Technical requirements complexity\"\n                }\n            ]\n        };\n    }\n\n    formatRiskExplanation(riskData, language, detailLevel, format) {\n        const translations = {\n            ru: {\n                riskAnalysis: \"\u0410\u043d\u0430\u043b\u0438\u0437 \u0440\u0438\u0441\u043a\u043e\u0432\",\n                overallScore: \"\u041e\u0431\u0449\u0438\u0439 \u0431\u0430\u043b\u043b \u0440\u0438\u0441\u043a\u0430\",\n                riskFactors: \"\u0424\u0430\u043a\u0442\u043e\u0440\u044b \u0440\u0438\u0441\u043a\u0430\",\n                lowRisk: \"\u041d\u0438\u0437\u043a\u0438\u0439 \u0440\u0438\u0441\u043a\",\n                mediumRisk: \"\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0440\u0438\u0441\u043a\",\n                highRisk: \"\u0412\u044b\u0441\u043e\u043a\u0438\u0439 \u0440\u0438\u0441\u043a\",\n                weight: \"\u0412\u0435\u0441\",\n                value: \"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435\",\n                impact: \"\u0412\u043b\u0438\u044f\u043d\u0438\u0435\"\n            },\n            kz: {\n                riskAnalysis: \"\u0422\u04d9\u0443\u0435\u043a\u0435\u043b \u0442\u0430\u043b\u0434\u0430\u0443\u044b\",\n                overallScore: \"\u0416\u0430\u043b\u043f\u044b \u0442\u04d9\u0443\u0435\u043a\u0435\u043b \u04b1\u043f\u0430\u0439\u044b\",\n                riskFactors: \"\u0422\u04d9\u0443\u0435\u043a\u0435\u043b \u0444\u0430\u043a\u0442\u043e\u0440\u043b\u0430\u0440\u044b\",\n                lowRisk: \"\u0422\u04e9\u043c\u0435\u043d \u0442\u04d9\u0443\u0435\u043a\u0435\u043b\",\n                mediumRisk: \"\u041e\u0440\u0442\u0430\u0448\u0430 \u0442\u04d9\u0443\u0435\u043a\u0435\u043b\",\n                highRisk: \"\u0416\u043e\u0493\u0430\u0440\u044b \u0442\u04d9\u0443\u0435\u043a\u0435\u043b\",\n                weight: \"\u0421\u0430\u043b\u043c\u0430\u049b\",\n                value: \"\u041c\u04d9\u043d\u0456\",\n                impact: \"\u04d8\u0441\u0435\u0440\"\n            },\n            en: {\n                riskAnalysis: \"Risk Analysis\",\n                overallScore: \"Overall Risk Score\",\n                riskFactors: \"Risk Factors\",\n                lowRisk: \"Low Risk\",\n                mediumRisk: \"Medium Risk\",\n                highRisk: \"High Risk\",\n                weight: \"Weight\",\n                value: \"Value\",\n                impact: \"Impact\"\n            }\n        };\n\n        const t = translations[language] || translations.ru;\n        const score = riskData.score || 0;\n        const riskLevel = score < 0.3 ? t.lowRisk :\n                         score < 0.7 ? t.mediumRisk : t.highRisk;\n\n        let content = \\`# \\${t.riskAnalysis} - Lot #\\${riskData.lotId}\n\n## \\${t.overallScore}: \\${(score * 100).toFixed(1)}% (\\${riskLevel})\n\n## \\${t.riskFactors}:\n\\`;\n\n        if (riskData.factors && riskData.factors.length > 0) {\n            riskData.factors.forEach(factor => {\n                const impact = (factor.weight * factor.value * 100).toFixed(1);\n                content += \\`\n### \\${factor.name}\n- **\\${t.weight}**: \\${(factor.weight * 100).toFixed(1)}%\n- **\\${t.value}**: \\${(factor.value * 100).toFixed(1)}%\n- **\\${t.impact}**: \\${impact}%\n- **\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435**: \\${factor.description || 'N/A'}\n\\`;\n            });\n        }\n\n        if (detailLevel === 'full' && riskData.historical) {\n            content += \\`\n## \u0418\u0441\u0442\u043e\u0440\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0430:\n\\${this.formatHistoricalData(riskData.historical, language)}\n\\`;\n        }\n\n        return this.convertFormat(content, format);\n    }\n\n    formatHistoricalData(historical, language) {\n        if (!historical || historical.length === 0) {\n            return language === 'ru' ? '\u041d\u0435\u0442 \u0438\u0441\u0442\u043e\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445' : 'No historical data';\n        }\n\n        let result = '';\n        historical.slice(0, 5).forEach(entry => {\n            result += \\`- \\${entry.created_at}: \\${(entry.score * 100).toFixed(1)}%\\\\n\\`;\n        });\n\n        return result;\n    }\n\n    generateRecommendations(riskData, language) {\n        const score = riskData.score || 0;\n\n        const recommendations = {\n            ru: {\n                high: [\n                    \"\u041f\u0440\u043e\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0439 \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u0438 \u0437\u0430\u043a\u0430\u0437\u0447\u0438\u043a\u0430\",\n                    \"\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430\",\n                    \"\u0423\u0432\u0435\u043b\u0438\u0447\u044c\u0442\u0435 \u0430\u0432\u0430\u043d\u0441\u043e\u0432\u044b\u0439 \u043f\u043b\u0430\u0442\u0435\u0436 \u0438\u043b\u0438 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0438\",\n                    \"\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0439\u0442\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435\"\n                ],\n                medium: [\n                    \"\u0423\u0442\u043e\u0447\u043d\u0438\u0442\u0435 \u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\",\n                    \"\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0440\u0435\u043f\u0443\u0442\u0430\u0446\u0438\u044e \u0437\u0430\u043a\u0430\u0437\u0447\u0438\u043a\u0430\",\n                    \"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u044c\u0442\u0435 \u043f\u043b\u0430\u043d \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0440\u0438\u0441\u043a\u0430\u043c\u0438\",\n                    \"\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u0442\u0432\u0430\"\n                ],\n                low: [\n                    \"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430\",\n                    \"\u0420\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0439 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f\",\n                    \"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u0441\u0432\u044f\u0437\u0438 \u0441 \u0437\u0430\u043a\u0430\u0437\u0447\u0438\u043a\u043e\u043c\"\n                ]\n            }\n        };\n\n        const recs = recommendations[language] || recommendations.ru;\n\n        if (score >= 0.7) return recs.high;\n        if (score >= 0.3) return recs.medium;\n        return recs.low;\n    }\n\n    convertFormat(content, format) {\n        switch (format) {\n            case 'html':\n                return content\n                    .replace(/^# (.*$)/gim, '<h1>$1</h1>')\n                    .replace(/^## (.*$)/gim, '<h2>$1</h2>')\n                    .replace(/^### (.*$)/gim, '<h3>$1</h3>')\n                    .replace(/^- (.*$)/gim, '<li>$1</li>')\n                    .replace(/\\\\*\\\\*(.*?)\\\\*\\\\*/g, '<strong>$1</strong>');\n\n            case 'text':\n                return content\n                    .replace(/^#+\\\\s*/gm, '')\n                    .replace(/\\\\*\\\\*(.*?)\\\\*\\\\*/g, '$1')\n                    .replace(/^- /gm, '\u2022 ');\n\n            case 'json':\n                return JSON.stringify({\n                    content: content,\n                    format: 'markdown'\n                }, null, 2);\n\n            case 'markdown':\n            default:\n                return content;\n        }\n    }\n}\n\n// Export for Flowise\nmodule.exports = { nodeClass: RiskExplainTool };\n"
}
