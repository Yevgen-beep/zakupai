{
    "name": "Template Generator",
    "version": "1.0.0",
    "description": "Generate documents from templates with dynamic data substitution and multi-format output",
    "icon": "ðŸ“„",
    "category": "Document Generation",
    "type": "tool",
    "inputs": [
        {
            "name": "templateType",
            "type": "select",
            "label": "Template Type",
            "description": "Type of document template to generate",
            "required": true,
            "options": [
                {
                    "label": "TL;DR Summary",
                    "value": "tldr"
                },
                {
                    "label": "Guarantee Letter",
                    "value": "guarantee_letter"
                },
                {
                    "label": "Business Proposal",
                    "value": "business_proposal"
                },
                {
                    "label": "Risk Report",
                    "value": "risk_report"
                },
                {
                    "label": "Financial Analysis",
                    "value": "financial_analysis"
                },
                {
                    "label": "Custom Template",
                    "value": "custom"
                }
            ],
            "default": "tldr"
        },
        {
            "name": "lotId",
            "type": "string",
            "label": "Lot ID",
            "description": "ID of the lot for template generation",
            "required": false,
            "placeholder": "e.g., 12345"
        },
        {
            "name": "templateData",
            "type": "json",
            "label": "Template Data",
            "description": "Data to populate template variables (JSON format)",
            "placeholder": "{\"company\": \"Acme Corp\", \"amount\": 1000000}",
            "default": "{}"
        },
        {
            "name": "customTemplate",
            "type": "string",
            "label": "Custom Template",
            "description": "Custom template content (use {{variable}} for substitution)",
            "multiline": true,
            "rows": 8,
            "placeholder": "Dear {{customer}},\\n\\nRegarding lot {{lotId}}...",
            "displayOptions": {
                "show": {
                    "templateType": ["custom"]
                }
            }
        },
        {
            "name": "outputFormat",
            "type": "select",
            "label": "Output Format",
            "description": "Format for generated document",
            "options": [
                {
                    "label": "HTML",
                    "value": "html"
                },
                {
                    "label": "Markdown",
                    "value": "markdown"
                },
                {
                    "label": "Plain Text",
                    "value": "text"
                },
                {
                    "label": "PDF",
                    "value": "pdf"
                }
            ],
            "default": "html"
        },
        {
            "name": "language",
            "type": "select",
            "label": "Language",
            "description": "Language for document generation",
            "options": [
                {
                    "label": "Russian",
                    "value": "ru"
                },
                {
                    "label": "Kazakh",
                    "value": "kz"
                },
                {
                    "label": "English",
                    "value": "en"
                }
            ],
            "default": "ru"
        },
        {
            "name": "includeMetadata",
            "type": "boolean",
            "label": "Include Metadata",
            "description": "Include generation metadata in output",
            "default": true
        },
        {
            "name": "autoFetch",
            "type": "boolean",
            "label": "Auto-fetch Data",
            "description": "Automatically fetch lot data if Lot ID is provided",
            "default": true
        },
        {
            "name": "includeRiskData",
            "type": "boolean",
            "label": "Include Risk Data",
            "description": "Include risk assessment data in template",
            "default": false
        },
        {
            "name": "includeFinancialData",
            "type": "boolean",
            "label": "Include Financial Data",
            "description": "Include financial calculations in template",
            "default": false
        },
        {
            "name": "pdfOptions",
            "type": "json",
            "label": "PDF Options",
            "description": "PDF generation options (margins, orientation, etc.)",
            "placeholder": "{\"pageSize\": \"A4\", \"orientation\": \"portrait\"}",
            "default": "{}",
            "displayOptions": {
                "show": {
                    "outputFormat": ["pdf"]
                }
            }
        }
    ],
    "outputs": [
        {
            "name": "document",
            "type": "string",
            "description": "Generated document content"
        },
        {
            "name": "metadata",
            "type": "object",
            "description": "Document generation metadata"
        },
        {
            "name": "downloadUrl",
            "type": "string",
            "description": "Download URL for PDF documents"
        }
    ],
    "code": "\nconst axios = require('axios');\n\nclass TemplateGeneratorTool {\n    async execute(inputs) {\n        const {\n            templateType,\n            lotId,\n            templateData,\n            customTemplate,\n            outputFormat,\n            language,\n            includeMetadata,\n            autoFetch,\n            includeRiskData,\n            includeFinancialData,\n            pdfOptions\n        } = inputs;\n\n        try {\n            // Parse template data\n            let data = {};\n            if (templateData && templateData !== '{}') {\n                try {\n                    data = JSON.parse(templateData);\n                } catch (error) {\n                    console.warn('Failed to parse template data:', error.message);\n                }\n            }\n\n            // Auto-fetch lot data if requested\n            if (autoFetch && lotId) {\n                const lotData = await this.fetchLotData(lotId, includeRiskData, includeFinancialData);\n                data = { ...lotData, ...data }; // User data overrides fetched data\n            }\n\n            // Get or create template content\n            let templateContent;\n            if (templateType === 'custom' && customTemplate) {\n                templateContent = customTemplate;\n            } else {\n                templateContent = await this.getTemplate(templateType, language);\n            }\n\n            // Process template with data\n            const processedContent = this.processTemplate(templateContent, data, language);\n\n            // Convert to requested format\n            const document = await this.convertToFormat(processedContent, outputFormat, pdfOptions);\n\n            const metadata = {\n                templateType,\n                outputFormat,\n                language,\n                generatedAt: new Date().toISOString(),\n                dataSourceCount: Object.keys(data).length\n            };\n\n            if (lotId) metadata.lotId = lotId;\n\n            let result = { document, metadata };\n\n            // Handle PDF output\n            if (outputFormat === 'pdf' && document.downloadUrl) {\n                result.downloadUrl = document.downloadUrl;\n                result.document = document.content || 'PDF generated successfully';\n            }\n\n            return result;\n\n        } catch (error) {\n            throw new Error(\\`Template generation failed: \\${error.message}\\`);\n        }\n    }\n\n    async fetchLotData(lotId, includeRisk, includeFinancial) {\n        const baseUrl = process.env.ZAKUPAI_BASE_URL || 'http://localhost:8000';\n        const apiKey = process.env.ZAKUPAI_API_KEY || 'changeme';\n\n        let lotData = {};\n\n        try {\n            // Fetch basic lot data\n            const lotResponse = await axios.get(\\`\\${baseUrl}/lots/\\${lotId}\\`, {\n                headers: { 'X-API-Key': apiKey }\n            });\n            lotData = lotResponse.data;\n\n            // Fetch risk data if requested\n            if (includeRisk) {\n                try {\n                    const riskResponse = await axios.get(\\`\\${baseUrl}/risk/explain/\\${lotId}\\`, {\n                        headers: { 'X-API-Key': apiKey }\n                    });\n                    lotData.risk = riskResponse.data;\n                } catch (error) {\n                    console.warn(\\`Failed to fetch risk data: \\${error.message}\\`);\n                }\n            }\n\n            // Fetch financial data if requested\n            if (includeFinancial) {\n                try {\n                    const financialResponse = await axios.get(\\`\\${baseUrl}/calc/lot-total/\\${lotId}\\`, {\n                        headers: { 'X-API-Key': apiKey }\n                    });\n                    lotData.financial = financialResponse.data;\n                } catch (error) {\n                    console.warn(\\`Failed to fetch financial data: \\${error.message}\\`);\n                }\n            }\n\n            return lotData;\n\n        } catch (error) {\n            console.warn(\\`Failed to fetch lot data: \\${error.message}\\`);\n            return { lotId: lotId, title: 'Lot data unavailable' };\n        }\n    }\n\n    async getTemplate(templateType, language) {\n        const templates = {\n            tldr: {\n                ru: \\`# \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043b\u043e\u0442\u0430 {{lotId}}\n\n**\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435:** {{title}}\n**\u0417\u0430\u043a\u0430\u0437\u0447\u0438\u043a:** {{customer}}\n**\u0426\u0435\u043d\u0430:** {{price}} \u0442\u0435\u043d\u0433\u0435\n**\u0421\u0440\u043e\u043a:** {{deadline}}\n**\u0421\u0442\u0430\u0442\u0443\u0441:** {{status}}\n\n{{#if risk}}\n**\u041e\u0446\u0435\u043d\u043a\u0430 \u0440\u0438\u0441\u043a\u0430:** {{risk.score}}% ({{risk.level}})\n{{/if}}\n\n{{#if financial}}\n**\u0424\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430:**\n- \u041e\u0431\u0449\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c: {{financial.total}}\n- \u0420\u0435\u043d\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c: {{financial.profitability}}%\n{{/if}}\\`,\n                en: \\`# Lot Summary {{lotId}}\n\n**Title:** {{title}}\n**Customer:** {{customer}}\n**Price:** {{price}} tenge\n**Deadline:** {{deadline}}\n**Status:** {{status}}\n\n{{#if risk}}\n**Risk Assessment:** {{risk.score}}% ({{risk.level}})\n{{/if}}\n\n{{#if financial}}\n**Financial Assessment:**\n- Total Cost: {{financial.total}}\n- Profitability: {{financial.profitability}}%\n{{/if}}\\`\n            },\n            guarantee_letter: {\n                ru: \\`# \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0439\u043d\u043e\u0435 \u043f\u0438\u0441\u044c\u043c\u043e\n\n\u0414\u0430\u0442\u0430: {{currentDate}}\n\n\u0423\u0432\u0430\u0436\u0430\u0435\u043c\u044b\u0435 \u043a\u043e\u043b\u043b\u0435\u0433\u0438!\n\n\u041d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u043c \u043f\u0438\u0441\u044c\u043c\u043e\u043c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u043c \u0433\u043e\u0442\u043e\u0432\u043d\u043e\u0441\u0442\u044c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \"{{companyName}}\" \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u0442\u0435\u043d\u0434\u0435\u0440\u0435 \u043f\u043e \u043b\u043e\u0442\u0443 {{lotId}} \"{{title}}\".\n\n**\u041f\u0440\u0435\u0434\u043c\u0435\u0442 \u0442\u0435\u043d\u0434\u0435\u0440\u0430:** {{title}}\n**\u0421\u0443\u043c\u043c\u0430 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430:** {{price}} \u0442\u0435\u043d\u0433\u0435\n**\u0421\u0440\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f:** {{deadline}}\n\n\u041c\u044b \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u043c:\n- \u041a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442/\u043f\u043e\u0441\u0442\u0430\u0432\u043a\u0443 \u0442\u043e\u0432\u0430\u0440\u043e\u0432\n- \u0421\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0435 \u0441\u0440\u043e\u043a\u043e\u0432 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430\n- \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0432\u0441\u0435\u043c \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c\n\n{{#if risk}}\n\u0421 \u0443\u0447\u0435\u0442\u043e\u043c \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u0438 \u0440\u0438\u0441\u043a\u043e\u0432 ({{risk.score}}%), \u043c\u044b \u0433\u043e\u0442\u043e\u0432\u044b \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0438 \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443.\n{{/if}}\n\n\u0421 \u0443\u0432\u0430\u0436\u0435\u043d\u0438\u0435\u043c,\n{{contactPerson}}\n\u0414\u0438\u0440\u0435\u043a\u0442\u043e\u0440 {{companyName}}\\`,\n                en: \\`# Guarantee Letter\n\nDate: {{currentDate}}\n\nDear Colleagues,\n\nThis letter confirms the readiness of \"{{companyName}}\" to participate in the tender for lot {{lotId}} \"{{title}}\".\n\n**Tender Subject:** {{title}}\n**Contract Amount:** {{price}} tenge\n**Delivery Period:** {{deadline}}\n\nWe guarantee:\n- Quality execution of work/delivery of goods\n- Compliance with contract deadlines\n- Compliance with all technical requirements\n\n{{#if risk}}\nTaking into account the risk assessment ({{risk.score}}%), we are ready to provide additional guarantees upon request.\n{{/if}}\n\nSincerely,\n{{contactPerson}}\nDirector of {{companyName}}\\`\n            },\n            risk_report: {\n                ru: \\`# \u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043e\u0446\u0435\u043d\u043a\u0435 \u0440\u0438\u0441\u043a\u043e\u0432 - \u041b\u043e\u0442 {{lotId}}\n\n**\u0414\u0430\u0442\u0430 \u0430\u043d\u0430\u043b\u0438\u0437\u0430:** {{currentDate}}\n**\u041b\u043e\u0442:** {{title}}\n**\u041e\u0431\u0449\u0438\u0439 \u0431\u0430\u043b\u043b \u0440\u0438\u0441\u043a\u0430:** {{risk.score}}% ({{risk.level}})\n\n## \u0410\u043d\u0430\u043b\u0438\u0437 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432 \u0440\u0438\u0441\u043a\u0430:\n\n{{#each risk.factors}}\n### {{this.name}}\n- \u0412\u0435\u0441: {{this.weight}}%\n- \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435: {{this.value}}%\n- \u0412\u043b\u0438\u044f\u043d\u0438\u0435: {{this.impact}}%\n- \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: {{this.description}}\n{{/each}}\n\n## \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438:\n\n{{#each recommendations}}\n- {{this}}\n{{/each}}\n\n## \u0424\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u044f:\n\n{{#if financial}}\n- \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0448\u0442\u0440\u0430\u0444\u044b: {{financial.penalties}} \u0442\u0435\u043d\u0433\u0435\n- \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c\u0430\u044f \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043a\u0430: {{financial.insurance}} \u0442\u0435\u043d\u0433\u0435\n{{/if}}\\`\n            }\n        };\n\n        return templates[templateType]?.[language] || templates[templateType]?.ru ||\n               \\`Template \\${templateType} not found\\`;\n    }\n\n    processTemplate(template, data, language) {\n        // Add current date and language-specific formatting\n        const processedData = {\n            ...data,\n            currentDate: new Date().toLocaleDateString(language === 'en' ? 'en-US' : 'ru-RU'),\n            currentDateTime: new Date().toLocaleString(language === 'en' ? 'en-US' : 'ru-RU')\n        };\n\n        // Simple template processing (replace {{variable}} with values)\n        let result = template;\n\n        Object.keys(processedData).forEach(key => {\n            const value = processedData[key];\n            const regex = new RegExp(\\`{{\\\\s*\\${key}\\\\s*}}\\`, 'g');\n\n            if (typeof value === 'object' && value !== null) {\n                // Handle nested objects\n                Object.keys(value).forEach(nestedKey => {\n                    const nestedRegex = new RegExp(\\`{{\\\\s*\\${key}\\\\.\\${nestedKey}\\\\s*}}\\`, 'g');\n                    result = result.replace(nestedRegex, value[nestedKey] || '');\n                });\n            } else {\n                result = result.replace(regex, value || '');\n            }\n        });\n\n        // Handle conditional blocks (simplified)\n        result = result.replace(/{{#if\\\\s+(\\\\w+)}}([\\\\s\\\\S]*?){{\\/if}}/g, (match, condition, content) => {\n            const value = processedData[condition];\n            return value ? content : '';\n        });\n\n        // Handle loops (simplified)\n        result = result.replace(/{{#each\\\\s+(\\\\w+)}}([\\\\s\\\\S]*?){{\\/each}}/g, (match, arrayName, content) => {\n            const array = processedData[arrayName];\n            if (!Array.isArray(array)) return '';\n\n            return array.map(item => {\n                let itemContent = content;\n                if (typeof item === 'object') {\n                    Object.keys(item).forEach(key => {\n                        const itemRegex = new RegExp(\\`{{\\\\s*this\\\\.\\${key}\\\\s*}}\\`, 'g');\n                        itemContent = itemContent.replace(itemRegex, item[key] || '');\n                    });\n                } else {\n                    itemContent = itemContent.replace(/{{\\\\s*this\\\\s*}}/g, item);\n                }\n                return itemContent;\n            }).join('');\n        });\n\n        return result;\n    }\n\n    async convertToFormat(content, format, options = {}) {\n        switch (format) {\n            case 'html':\n                return this.convertToHtml(content);\n\n            case 'markdown':\n                return content; // Already in markdown format\n\n            case 'text':\n                return this.convertToText(content);\n\n            case 'pdf':\n                return await this.convertToPdf(content, options);\n\n            default:\n                return content;\n        }\n    }\n\n    convertToHtml(markdown) {\n        return markdown\n            .replace(/^# (.*$)/gim, '<h1>$1</h1>')\n            .replace(/^## (.*$)/gim, '<h2>$1</h2>')\n            .replace(/^### (.*$)/gim, '<h3>$1</h3>')\n            .replace(/\\\\*\\\\*(.*?)\\\\*\\\\*/g, '<strong>$1</strong>')\n            .replace(/\\\\*(.*?)\\\\*/g, '<em>$1</em>')\n            .replace(/^- (.*$)/gim, '<li>$1</li>')\n            .replace(/<li>/g, '<ul><li>')\n            .replace(/<\\\\/li>\\\\n/g, '</li></ul>\\\\n')\n            .replace(/\\\\n/g, '<br>\\\\n')\n            .replace(/<\\\\/h[1-3]><br>/g, '</h1>')\n            .replace(/<\\\\/h[1-3]><br>/g, '</h2>')\n            .replace(/<\\\\/h[1-3]><br>/g, '</h3>');\n    }\n\n    convertToText(markdown) {\n        return markdown\n            .replace(/^#+\\\\s*/gm, '')\n            .replace(/\\\\*\\\\*(.*?)\\\\*\\\\*/g, '$1')\n            .replace(/\\\\*(.*?)\\\\*/g, '$1')\n            .replace(/^- /gm, '\u2022 ');\n    }\n\n    async convertToPdf(content, options) {\n        const baseUrl = process.env.ZAKUPAI_BASE_URL || 'http://localhost:8000';\n        const apiKey = process.env.ZAKUPAI_API_KEY || 'changeme';\n\n        try {\n            const response = await axios.post(\\`\\${baseUrl}/render/pdf\\`, {\n                template: 'custom',\n                content: content,\n                ...options\n            }, {\n                headers: { 'X-API-Key': apiKey }\n            });\n\n            return {\n                content: 'PDF generated successfully',\n                downloadUrl: response.data.download_url || null,\n                size: response.data.size || 0\n            };\n\n        } catch (error) {\n            console.warn('PDF generation failed, falling back to HTML');\n            return this.convertToHtml(content);\n        }\n    }\n}\n\n// Export for Flowise\nmodule.exports = { nodeClass: TemplateGeneratorTool };\n"
}
