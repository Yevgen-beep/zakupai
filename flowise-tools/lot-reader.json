{
    "name": "Lot Reader",
    "version": "1.0.0",
    "description": "Read and parse tender lot information from various sources",
    "icon": "üîç",
    "category": "Data Sources",
    "type": "tool",
    "inputs": [
        {
            "name": "lotId",
            "type": "string",
            "label": "Lot ID",
            "description": "ID of the lot to read",
            "required": true,
            "placeholder": "e.g., 12345"
        },
        {
            "name": "source",
            "type": "select",
            "label": "Data Source",
            "description": "Source to read lot data from",
            "required": true,
            "options": [
                {
                    "label": "Goszakup API",
                    "value": "goszakup"
                },
                {
                    "label": "Internal Database",
                    "value": "database"
                },
                {
                    "label": "Zakupai Cache",
                    "value": "cache"
                }
            ],
            "default": "database"
        },
        {
            "name": "includeDetails",
            "type": "boolean",
            "label": "Include Details",
            "description": "Include detailed lot information (requirements, specifications)",
            "default": true
        },
        {
            "name": "includePricing",
            "type": "boolean",
            "label": "Include Pricing",
            "description": "Include pricing information and market analysis",
            "default": true
        },
        {
            "name": "includeRisk",
            "type": "boolean",
            "label": "Include Risk Assessment",
            "description": "Include risk score and risk factors",
            "default": false
        },
        {
            "name": "language",
            "type": "select",
            "label": "Output Language",
            "description": "Language for output formatting",
            "options": [
                {
                    "label": "Russian",
                    "value": "ru"
                },
                {
                    "label": "Kazakh",
                    "value": "kz"
                },
                {
                    "label": "English",
                    "value": "en"
                }
            ],
            "default": "ru"
        }
    ],
    "outputs": [
        {
            "name": "lotData",
            "type": "object",
            "description": "Complete lot information"
        },
        {
            "name": "summary",
            "type": "string",
            "description": "Human-readable lot summary"
        },
        {
            "name": "metadata",
            "type": "object",
            "description": "Metadata about the data source and retrieval"
        }
    ],
    "code": "\nconst axios = require('axios');\n\nclass LotReaderTool {\n    async execute(inputs) {\n        const { lotId, source, includeDetails, includePricing, includeRisk, language } = inputs;\n\n        try {\n            let lotData = {};\n            const metadata = {\n                lotId,\n                source,\n                retrievedAt: new Date().toISOString(),\n                language\n            };\n\n            // Read lot data based on source\n            switch (source) {\n                case 'database':\n                    lotData = await this.readFromDatabase(lotId, includeDetails, includePricing, includeRisk);\n                    break;\n                case 'goszakup':\n                    lotData = await this.readFromGoszakup(lotId);\n                    break;\n                case 'cache':\n                    lotData = await this.readFromCache(lotId);\n                    break;\n                default:\n                    throw new Error(\\`Unsupported source: \\${source}\\`);\n            }\n\n            // Generate summary\n            const summary = this.generateSummary(lotData, language);\n\n            return {\n                lotData,\n                summary,\n                metadata\n            };\n        } catch (error) {\n            throw new Error(\\`Failed to read lot \\${lotId}: \\${error.message}\\`);\n        }\n    }\n\n    async readFromDatabase(lotId, includeDetails, includePricing, includeRisk) {\n        const baseUrl = process.env.ZAKUPAI_BASE_URL || 'http://localhost:8000';\n        const apiKey = process.env.ZAKUPAI_API_KEY || 'changeme';\n\n        const lotResponse = await axios.get(\\`\\${baseUrl}/lots/\\${lotId}\\`, {\n            headers: { 'X-API-Key': apiKey }\n        });\n\n        let lotData = lotResponse.data;\n\n        if (includePricing) {\n            try {\n                const pricingResponse = await axios.get(\\`\\${baseUrl}/calc/lot-total/\\${lotId}\\`, {\n                    headers: { 'X-API-Key': apiKey }\n                });\n                lotData.pricing = pricingResponse.data;\n            } catch (error) {\n                console.warn(\\`Failed to get pricing for lot \\${lotId}: \\${error.message}\\`);\n            }\n        }\n\n        if (includeRisk) {\n            try {\n                const riskResponse = await axios.post(\\`\\${baseUrl}/risk/score/\\${lotId}\\`, {}, {\n                    headers: { 'X-API-Key': apiKey }\n                });\n                lotData.riskAssessment = riskResponse.data;\n            } catch (error) {\n                console.warn(\\`Failed to get risk assessment for lot \\${lotId}: \\${error.message}\\`);\n            }\n        }\n\n        return lotData;\n    }\n\n    async readFromGoszakup(lotId) {\n        // This would integrate with Goszakup API\n        // For now, return mock data\n        return {\n            id: lotId,\n            title: \"Sample Goszakup Lot\",\n            description: \"Retrieved from Goszakup API\",\n            customer: \"Government Entity\",\n            price: 1000000,\n            deadline: \"2024-12-31\",\n            source: \"goszakup\"\n        };\n    }\n\n    async readFromCache(lotId) {\n        // This would read from Redis/memory cache\n        // For now, return mock data\n        return {\n            id: lotId,\n            title: \"Cached Lot Data\",\n            description: \"Retrieved from cache\",\n            cached: true,\n            cacheTime: new Date().toISOString()\n        };\n    }\n\n    generateSummary(lotData, language) {\n        const translations = {\n            ru: {\n                lot: \"\u041b\u043e\u0442\",\n                title: \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\",\n                customer: \"\u0417\u0430\u043a\u0430\u0437\u0447\u0438\u043a\",\n                price: \"\u0426\u0435\u043d\u0430\",\n                deadline: \"\u041a\u0440\u0430\u0439\u043d\u0438\u0439 \u0441\u0440\u043e\u043a\",\n                risk: \"\u0420\u0438\u0441\u043a\"\n            },\n            kz: {\n                lot: \"\u041b\u043e\u0442\",\n                title: \"\u0410\u0442\u0430\u0443\u044b\",\n                customer: \"\u0422\u0430\u043f\u0441\u044b\u0440\u044b\u0441 \u0431\u0435\u0440\u0443\u0448\u0456\",\n                price: \"\u0411\u0430\u0493\u0430\",\n                deadline: \"\u0421\u043e\u04a3\u0493\u044b \u043c\u0435\u0440\u0437\u0456\u043c\",\n                risk: \"\u0422\u04d9\u0443\u0435\u043a\u0435\u043b\"\n            },\n            en: {\n                lot: \"Lot\",\n                title: \"Title\",\n                customer: \"Customer\",\n                price: \"Price\",\n                deadline: \"Deadline\",\n                risk: \"Risk\"\n            }\n        };\n\n        const t = translations[language] || translations.ru;\n\n        let summary = \\`\\${t.lot} #\\${lotData.id || 'N/A'}\\\\n\\`;\n\n        if (lotData.title) {\n            summary += \\`\\${t.title}: \\${lotData.title}\\\\n\\`;\n        }\n\n        if (lotData.customer) {\n            summary += \\`\\${t.customer}: \\${lotData.customer}\\\\n\\`;\n        }\n\n        if (lotData.price) {\n            summary += \\`\\${t.price}: \\${lotData.price.toLocaleString()} \u0442\u0435\u043d\u0433\u0435\\\\n\\`;\n        }\n\n        if (lotData.deadline) {\n            summary += \\`\\${t.deadline}: \\${lotData.deadline}\\\\n\\`;\n        }\n\n        if (lotData.riskAssessment?.score) {\n            summary += \\`\\${t.risk}: \\${(lotData.riskAssessment.score * 100).toFixed(1)}%\\\\n\\`;\n        }\n\n        return summary.trim();\n    }\n}\n\n// Export for Flowise\nmodule.exports = { nodeClass: LotReaderTool };\n"
}
