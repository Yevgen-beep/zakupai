{
    "name": "Finance Calculator",
    "version": "1.0.0",
    "description": "Calculate financial metrics for tender lots including VAT, margins, penalties, and profitability analysis",
    "icon": "ðŸ’°",
    "category": "Financial",
    "type": "tool",
    "inputs": [
        {
            "name": "lotId",
            "type": "string",
            "label": "Lot ID",
            "description": "ID of the lot for financial calculations",
            "required": false,
            "placeholder": "e.g., 12345"
        },
        {
            "name": "calculationType",
            "type": "select",
            "label": "Calculation Type",
            "description": "Type of financial calculation to perform",
            "required": true,
            "options": [
                {
                    "label": "VAT Calculation",
                    "value": "vat"
                },
                {
                    "label": "Margin Analysis",
                    "value": "margin"
                },
                {
                    "label": "Penalty Assessment",
                    "value": "penalty"
                },
                {
                    "label": "Lot Total Cost",
                    "value": "total"
                },
                {
                    "label": "Profitability Analysis",
                    "value": "profitability"
                },
                {
                    "label": "Full Financial Report",
                    "value": "full_report"
                }
            ],
            "default": "margin"
        },
        {
            "name": "baseAmount",
            "type": "number",
            "label": "Base Amount",
            "description": "Base amount in tenge for calculations",
            "required": false,
            "placeholder": "1000000"
        },
        {
            "name": "vatRate",
            "type": "number",
            "label": "VAT Rate (%)",
            "description": "VAT rate percentage (default: 12% for Kazakhstan)",
            "default": 12,
            "min": 0,
            "max": 25
        },
        {
            "name": "marginTarget",
            "type": "number",
            "label": "Target Margin (%)",
            "description": "Desired profit margin percentage",
            "default": 20,
            "min": 0,
            "max": 100
        },
        {
            "name": "costData",
            "type": "json",
            "label": "Cost Data",
            "description": "Detailed cost breakdown (JSON format)",
            "placeholder": "{\"materials\": 500000, \"labor\": 300000, \"overhead\": 100000}",
            "default": "{}"
        },
        {
            "name": "penaltyRate",
            "type": "number",
            "label": "Penalty Rate (%/day)",
            "description": "Daily penalty rate for late delivery",
            "default": 0.1,
            "min": 0,
            "max": 1
        },
        {
            "name": "deliveryDays",
            "type": "number",
            "label": "Delivery Period (days)",
            "description": "Expected delivery period in days",
            "default": 30,
            "min": 1
        },
        {
            "name": "currency",
            "type": "select",
            "label": "Currency",
            "description": "Currency for calculations and display",
            "options": [
                {
                    "label": "KZT (Tenge)",
                    "value": "KZT"
                },
                {
                    "label": "USD (Dollar)",
                    "value": "USD"
                },
                {
                    "label": "EUR (Euro)",
                    "value": "EUR"
                }
            ],
            "default": "KZT"
        },
        {
            "name": "language",
            "type": "select",
            "label": "Language",
            "description": "Language for output formatting",
            "options": [
                {
                    "label": "Russian",
                    "value": "ru"
                },
                {
                    "label": "Kazakh",
                    "value": "kz"
                },
                {
                    "label": "English",
                    "value": "en"
                }
            ],
            "default": "ru"
        }
    ],
    "outputs": [
        {
            "name": "result",
            "type": "object",
            "description": "Financial calculation results"
        },
        {
            "name": "summary",
            "type": "string",
            "description": "Human-readable summary"
        },
        {
            "name": "recommendations",
            "type": "array",
            "description": "Financial recommendations"
        },
        {
            "name": "metadata",
            "type": "object",
            "description": "Calculation metadata"
        }
    ],
    "code": "\nconst axios = require('axios');\n\nclass FinanceCalculatorTool {\n    async execute(inputs) {\n        const {\n            lotId,\n            calculationType,\n            baseAmount,\n            vatRate,\n            marginTarget,\n            costData,\n            penaltyRate,\n            deliveryDays,\n            currency,\n            language\n        } = inputs;\n\n        try {\n            let result = {};\n            const metadata = {\n                calculationType,\n                currency,\n                language,\n                calculatedAt: new Date().toISOString()\n            };\n\n            // Parse cost data if provided\n            let costs = {};\n            if (costData && costData !== '{}') {\n                try {\n                    costs = JSON.parse(costData);\n                } catch (error) {\n                    console.warn('Failed to parse cost data:', error.message);\n                }\n            }\n\n            // Perform calculations based on type\n            switch (calculationType) {\n                case 'vat':\n                    result = await this.calculateVAT(baseAmount, vatRate, currency);\n                    break;\n                case 'margin':\n                    result = await this.calculateMargin(baseAmount, costs, marginTarget, currency);\n                    break;\n                case 'penalty':\n                    result = await this.calculatePenalty(baseAmount, penaltyRate, deliveryDays, currency);\n                    break;\n                case 'total':\n                    result = lotId ?\n                        await this.calculateLotTotal(lotId, currency) :\n                        await this.calculateTotal(baseAmount, costs, vatRate, currency);\n                    break;\n                case 'profitability':\n                    result = await this.analyzeProfitability(baseAmount, costs, marginTarget, vatRate, currency);\n                    break;\n                case 'full_report':\n                    result = await this.generateFullReport(lotId, baseAmount, costs, vatRate, marginTarget, penaltyRate, deliveryDays, currency);\n                    break;\n                default:\n                    throw new Error(\\`Unsupported calculation type: \\${calculationType}\\`);\n            }\n\n            // Generate summary and recommendations\n            const summary = this.generateSummary(result, language, calculationType);\n            const recommendations = this.generateRecommendations(result, language);\n\n            if (lotId) {\n                metadata.lotId = lotId;\n                await this.saveCalculationResult(lotId, calculationType, result);\n            }\n\n            return {\n                result,\n                summary,\n                recommendations,\n                metadata\n            };\n\n        } catch (error) {\n            throw new Error(\\`Financial calculation failed: \\${error.message}\\`);\n        }\n    }\n\n    async calculateVAT(amount, vatRate, currency) {\n        const vatAmount = amount * (vatRate / 100);\n        const totalWithVAT = amount + vatAmount;\n\n        return {\n            baseAmount: amount,\n            vatRate: vatRate,\n            vatAmount: vatAmount,\n            totalWithVAT: totalWithVAT,\n            currency: currency\n        };\n    }\n\n    async calculateMargin(amount, costs, targetMargin, currency) {\n        const totalCosts = Object.values(costs).reduce((sum, cost) => sum + (cost || 0), 0) || amount * 0.7;\n        const currentMargin = amount > 0 ? ((amount - totalCosts) / amount) * 100 : 0;\n        const recommendedPrice = totalCosts * (1 + targetMargin / 100);\n\n        return {\n            revenue: amount,\n            totalCosts: totalCosts,\n            profit: amount - totalCosts,\n            currentMargin: currentMargin,\n            targetMargin: targetMargin,\n            recommendedPrice: recommendedPrice,\n            marginGap: currentMargin - targetMargin,\n            currency: currency,\n            costBreakdown: costs\n        };\n    }\n\n    async calculatePenalty(amount, penaltyRate, deliveryDays, currency) {\n        const dailyPenalty = amount * (penaltyRate / 100);\n        const totalPenaltyRisk = dailyPenalty * deliveryDays;\n        const penaltyThreshold = amount * 0.1; // 10% threshold\n\n        return {\n            contractAmount: amount,\n            penaltyRate: penaltyRate,\n            deliveryDays: deliveryDays,\n            dailyPenalty: dailyPenalty,\n            totalPenaltyRisk: totalPenaltyRisk,\n            penaltyThreshold: penaltyThreshold,\n            riskLevel: totalPenaltyRisk > penaltyThreshold ? 'high' : 'normal',\n            currency: currency\n        };\n    }\n\n    async calculateLotTotal(lotId, currency) {\n        const baseUrl = process.env.ZAKUPAI_BASE_URL || 'http://localhost:8000';\n        const apiKey = process.env.ZAKUPAI_API_KEY || 'changeme';\n\n        try {\n            const response = await axios.get(\\`\\${baseUrl}/calc/lot-total/\\${lotId}\\`, {\n                headers: { 'X-API-Key': apiKey }\n            });\n\n            return {\n                ...response.data,\n                currency: currency,\n                source: 'api'\n            };\n        } catch (error) {\n            throw new Error(\\`Failed to get lot total: \\${error.message}\\`);\n        }\n    }\n\n    async calculateTotal(baseAmount, costs, vatRate, currency) {\n        const totalCosts = Object.values(costs).reduce((sum, cost) => sum + (cost || 0), 0);\n        const subtotal = baseAmount || totalCosts * 1.3; // Add 30% markup if no base amount\n        const vatAmount = subtotal * (vatRate / 100);\n        const grandTotal = subtotal + vatAmount;\n\n        return {\n            costs: costs,\n            totalCosts: totalCosts,\n            subtotal: subtotal,\n            vatRate: vatRate,\n            vatAmount: vatAmount,\n            grandTotal: grandTotal,\n            currency: currency\n        };\n    }\n\n    async analyzeProfitability(revenue, costs, targetMargin, vatRate, currency) {\n        const totalCosts = Object.values(costs).reduce((sum, cost) => sum + (cost || 0), 0) || revenue * 0.7;\n        const grossProfit = revenue - totalCosts;\n        const grossMargin = revenue > 0 ? (grossProfit / revenue) * 100 : 0;\n\n        const vatAmount = revenue * (vatRate / 100);\n        const netRevenue = revenue - vatAmount;\n        const netMargin = netRevenue > 0 ? ((netRevenue - totalCosts) / netRevenue) * 100 : 0;\n\n        const breakEvenPoint = totalCosts / (1 - vatRate / 100);\n        const profitabilityScore = this.calculateProfitabilityScore(grossMargin, targetMargin);\n\n        return {\n            revenue: revenue,\n            totalCosts: totalCosts,\n            grossProfit: grossProfit,\n            grossMargin: grossMargin,\n            netRevenue: netRevenue,\n            netMargin: netMargin,\n            targetMargin: targetMargin,\n            breakEvenPoint: breakEvenPoint,\n            profitabilityScore: profitabilityScore,\n            isViable: grossMargin >= targetMargin * 0.8,\n            currency: currency\n        };\n    }\n\n    async generateFullReport(lotId, baseAmount, costs, vatRate, marginTarget, penaltyRate, deliveryDays, currency) {\n        const vatCalc = await this.calculateVAT(baseAmount, vatRate, currency);\n        const marginCalc = await this.calculateMargin(baseAmount, costs, marginTarget, currency);\n        const penaltyCalc = await this.calculatePenalty(baseAmount, penaltyRate, deliveryDays, currency);\n        const profitabilityCalc = await this.analyzeProfitability(baseAmount, costs, marginTarget, vatRate, currency);\n\n        return {\n            vat: vatCalc,\n            margin: marginCalc,\n            penalty: penaltyCalc,\n            profitability: profitabilityCalc,\n            overallRating: this.calculateOverallRating(marginCalc, penaltyCalc, profitabilityCalc),\n            currency: currency\n        };\n    }\n\n    calculateProfitabilityScore(actualMargin, targetMargin) {\n        if (actualMargin >= targetMargin) return 100;\n        return Math.max(0, (actualMargin / targetMargin) * 100);\n    }\n\n    calculateOverallRating(marginCalc, penaltyCalc, profitabilityCalc) {\n        let score = 0;\n\n        // Margin score (40%)\n        if (marginCalc.currentMargin >= marginCalc.targetMargin) score += 40;\n        else score += (marginCalc.currentMargin / marginCalc.targetMargin) * 40;\n\n        // Risk score (30%)\n        if (penaltyCalc.riskLevel === 'normal') score += 30;\n        else score += 15;\n\n        // Profitability score (30%)\n        score += (profitabilityCalc.profitabilityScore / 100) * 30;\n\n        return {\n            score: Math.round(score),\n            rating: score >= 80 ? 'excellent' : score >= 60 ? 'good' : score >= 40 ? 'fair' : 'poor'\n        };\n    }\n\n    generateSummary(result, language, calculationType) {\n        const translations = {\n            ru: {\n                vatCalculation: \"\u0420\u0430\u0441\u0447\u0435\u0442 \u041d\u0414\u0421\",\n                marginAnalysis: \"\u0410\u043d\u0430\u043b\u0438\u0437 \u043c\u0430\u0440\u0436\u0438\",\n                penaltyAssessment: \"\u041e\u0446\u0435\u043d\u043a\u0430 \u0448\u0442\u0440\u0430\u0444\u043e\u0432\",\n                profitabilityAnalysis: \"\u0410\u043d\u0430\u043b\u0438\u0437 \u0440\u0435\u043d\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\",\n                amount: \"\u0421\u0443\u043c\u043c\u0430\",\n                margin: \"\u041c\u0430\u0440\u0436\u0430\",\n                profit: \"\u041f\u0440\u0438\u0431\u044b\u043b\u044c\",\n                risk: \"\u0420\u0438\u0441\u043a\",\n                total: \"\u0418\u0442\u043e\u0433\u043e\"\n            },\n            en: {\n                vatCalculation: \"VAT Calculation\",\n                marginAnalysis: \"Margin Analysis\",\n                penaltyAssessment: \"Penalty Assessment\",\n                profitabilityAnalysis: \"Profitability Analysis\",\n                amount: \"Amount\",\n                margin: \"Margin\",\n                profit: \"Profit\",\n                risk: \"Risk\",\n                total: \"Total\"\n            }\n        };\n\n        const t = translations[language] || translations.ru;\n        let summary = '';\n\n        switch (calculationType) {\n            case 'vat':\n                summary = \\`\\${t.vatCalculation}: \\${result.totalWithVAT?.toLocaleString()} \\${result.currency}\\`;\n                break;\n            case 'margin':\n                summary = \\`\\${t.marginAnalysis}: \\${result.currentMargin?.toFixed(1)}% (\\${result.profit?.toLocaleString()} \\${result.currency})\\`;\n                break;\n            case 'penalty':\n                summary = \\`\\${t.penaltyAssessment}: \\${result.riskLevel} (\\${result.totalPenaltyRisk?.toLocaleString()} \\${result.currency})\\`;\n                break;\n            default:\n                summary = \\`Financial calculation completed for \\${result.currency}\\`;\n        }\n\n        return summary;\n    }\n\n    generateRecommendations(result, language) {\n        const recommendations = [];\n\n        if (result.margin && result.margin.currentMargin < result.margin.targetMargin) {\n            recommendations.push(language === 'ru' ?\n                \"\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043d\u0438\u0436\u0435\u043d\u0438\u044f \u0437\u0430\u0442\u0440\u0430\u0442 \u0438\u043b\u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u044f \u0446\u0435\u043d\u044b\" :\n                \"Consider reducing costs or increasing price\");\n        }\n\n        if (result.penalty && result.penalty.riskLevel === 'high') {\n            recommendations.push(language === 'ru' ?\n                \"\u0412\u044b\u0441\u043e\u043a\u0438\u0439 \u0440\u0438\u0441\u043a \u0448\u0442\u0440\u0430\u0444\u043e\u0432 - \u043f\u0435\u0440\u0435\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0441\u0440\u043e\u043a\u0438 \u043f\u043e\u0441\u0442\u0430\u0432\u043a\u0438\" :\n                \"High penalty risk - review delivery timeline\");\n        }\n\n        if (result.profitability && !result.profitability.isViable) {\n            recommendations.push(language === 'ru' ?\n                \"\u041f\u0440\u043e\u0435\u043a\u0442 \u043d\u0435\u0440\u0435\u043d\u0442\u0430\u0431\u0435\u043b\u0435\u043d \u043f\u0440\u0438 \u0442\u0435\u043a\u0443\u0449\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445\" :\n                \"Project is not viable with current parameters\");\n        }\n\n        return recommendations;\n    }\n\n    async saveCalculationResult(lotId, calculationType, result) {\n        const baseUrl = process.env.ZAKUPAI_BASE_URL || 'http://localhost:8000';\n        const apiKey = process.env.ZAKUPAI_API_KEY || 'changeme';\n\n        try {\n            await axios.post(\\`\\${baseUrl}/calc/save\\`, {\n                lot_id: lotId,\n                calculation_type: calculationType,\n                result: result,\n                calculated_at: new Date().toISOString()\n            }, {\n                headers: { 'X-API-Key': apiKey }\n            });\n        } catch (error) {\n            console.warn(\\`Failed to save calculation result: \\${error.message}\\`);\n        }\n    }\n}\n\n// Export for Flowise\nmodule.exports = { nodeClass: FinanceCalculatorTool };\n"
}
