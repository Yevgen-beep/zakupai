"""
ZakupAI Telegram Bot - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π webhook/polling
"""

import asyncio
import json
import logging
import tempfile
from contextlib import asynccontextmanager
from pathlib import Path
from typing import Any

import aiohttp
from aiogram import Bot, Dispatcher, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, WebhookInfo
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiohttp import web
from config import config
from db_simple import get_api_key, init_db, save_api_key
from error_handler import ErrorHandlingMiddleware

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_file_path = Path(tempfile.gettempdir()) / "zakupai_bot.log"

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(log_file_path, encoding="utf-8"),
    ],
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = config.telegram.bot_token
USE_WEBHOOK = config.security.environment in ["staging", "production"]
WEBHOOK_URL = config.telegram.webhook_url or ""
WEBHOOK_SECRET = config.telegram.webhook_secret or ""

logger.info(f"Bot starting in {'WEBHOOK' if USE_WEBHOOK else 'POLLING'} mode")
logger.info(f"Environment: {config.security.environment}")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –∏ router
dp.message.middleware(ErrorHandlingMiddleware())
dp.include_router(router)

# API –∫–ª–∏–µ–Ω—Ç—ã
billing_service_url = config.api.billing_service_url
zakupai_api_url = config.api.zakupai_base_url
n8n_webhook_url = config.api.n8n_webhook_url


async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞"""
    if not USE_WEBHOOK or not WEBHOOK_URL:
        logger.info("Webhook setup skipped (using polling mode)")
        return False

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
        webhook_info: WebhookInfo = await bot.get_webhook_info()
        logger.info(f"Current webhook: {webhook_info.url}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π
        if webhook_info.url != WEBHOOK_URL:
            logger.info(f"Setting webhook to: {WEBHOOK_URL}")

            success = await bot.set_webhook(
                url=WEBHOOK_URL,
                secret_token=WEBHOOK_SECRET,
                allowed_updates=["message"],
                drop_pending_updates=True,
            )

            if success:
                logger.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")
                return False
        else:
            logger.info("‚úÖ Webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {type(e).__name__}: {e}")
        return False


async def remove_webhook():
    """–£–¥–∞–ª–µ–Ω–∏–µ webhook (–¥–ª—è polling —Ä–µ–∂–∏–º–∞)"""
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω (–ø–µ—Ä–µ—Ö–æ–¥ –≤ polling —Ä–µ–∂–∏–º)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {e}")


# === BILLING SERVICE INTEGRATION ===


async def create_billing_key(tg_id: int) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ API –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ Billing Service"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{billing_service_url}/billing/create_key",
                json={"tg_id": tg_id, "email": None},
                timeout=aiohttp.ClientTimeout(total=10),
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    api_key = data.get("api_key", "")
                    if api_key:
                        logger.info(f"‚úÖ Created API key for user {tg_id}")
                        return api_key
                    else:
                        logger.warning(f"‚ùå Empty API key returned for user {tg_id}")
                        return ""
                else:
                    logger.error(
                        f"‚ùå Billing service error {response.status} for user {tg_id}"
                    )
                    return ""
    except Exception as e:
        logger.error(f"‚ùå Error creating API key for user {tg_id}: {type(e).__name__}")
        return ""


async def validate_billing_key(api_key: str, endpoint: str) -> dict[str, Any]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ Billing Service"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{billing_service_url}/billing/validate_key",
                json={"api_key": api_key, "endpoint": endpoint},
                timeout=aiohttp.ClientTimeout(total=10),
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    is_valid = data.get("valid", False)
                    logger.info(
                        f"üîë Key validation for {endpoint}: {'‚úÖ valid' if is_valid else '‚ùå invalid'}"
                    )
                    return data
                elif response.status == 429:
                    logger.warning(f"‚è±Ô∏è Rate limit exceeded for {endpoint}")
                    return {"valid": False, "error": "Rate limit exceeded"}
                else:
                    logger.error(f"‚ùå Billing validation error {response.status}")
                    return {"valid": False, "error": "Service error"}
    except Exception as e:
        logger.error(f"‚ùå Error validating key: {type(e).__name__}")
        return {"valid": False, "error": "Network error"}


async def log_usage(api_key: str, endpoint: str) -> bool:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{billing_service_url}/billing/usage",
                json={"api_key": api_key, "endpoint": endpoint, "requests": 1},
                timeout=aiohttp.ClientTimeout(total=5),
            ) as response:
                if response.status == 200:
                    logger.debug(f"üìù Usage logged for {endpoint}")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è Usage logging failed: {response.status}")
                    return False
    except Exception as e:
        logger.error(f"‚ùå Error logging usage: {type(e).__name__}")
        return False


# === BOT COMMAND HANDLERS ===


@router.message(CommandStart())
async def start_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"

    logger.info(f"üì± /start from user {user_id} (@{username})")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API –∫–ª—é—á
        api_key = await get_api_key(user_id)

        if not api_key:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á —á–µ—Ä–µ–∑ Billing Service
            logger.info(f"üîë Creating new API key for user {user_id}")
            api_key = await create_billing_key(user_id)

            if api_key:
                await save_api_key(user_id, api_key)
                logger.info(f"‚úÖ API key saved for user {user_id}")

                await message.answer(
                    f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n\n"
                    "‚úÖ API –∫–ª—é—á —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n"
                    "üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "‚Ä¢ /search <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –ª–æ—Ç–æ–≤\n"
                    "‚Ä¢ /lot <ID> - –∞–Ω–∞–ª–∏–∑ –ª–æ—Ç–∞\n"
                    "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞"
                )
            else:
                await message.answer(
                    f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n\n"
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API –∫–ª—é—á –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /key <–≤–∞—à_–∫–ª—é—á> –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏."
                )
        else:
            await message.answer(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {message.from_user.full_name}!\n\n"
                "üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /search <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –ª–æ—Ç–æ–≤\n"
                "‚Ä¢ /lot <ID> - –∞–Ω–∞–ª–∏–∑ –ª–æ—Ç–∞\n"
                "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞"
            )

    except Exception as e:
        logger.error(
            f"‚ùå Error in start command for user {user_id}: {type(e).__name__}"
        )
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("key"))
async def key_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /key - –ø—Ä–∏–≤—è–∑–∫–∞ API –∫–ª—é—á–∞"""
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"

    logger.info(f"üîë /key from user {user_id} (@{username})")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split(" ", 1)
    if len(args) < 2:
        await message.answer(
            "üîë –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /key <–≤–∞—à_api_–∫–ª—é—á>\n"
            "–ü—Ä–∏–º–µ—Ä: /key 12345678-1234-1234-1234-123456789abc"
        )
        return

    api_key = args[1].strip()

    if len(api_key) < 10:
        await message.answer("‚ùå API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        return

    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ Billing Service
        validation = await validate_billing_key(api_key, "key")

        if validation.get("valid", False):
            await save_api_key(user_id, api_key)
            await log_usage(api_key, "key")

            plan = validation.get("plan", "free")
            await message.answer(
                f"‚úÖ API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n"
                f"üìã –ü–ª–∞–Ω: {plan.upper()}\n"
                "üöÄ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"
            )
            logger.info(
                f"‚úÖ API key validated and saved for user {user_id} (plan: {plan})"
            )
        else:
            error_msg = validation.get("error", "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á")
            await message.answer(f"‚ùå {error_msg}")
            logger.warning(f"‚ùå Invalid API key from user {user_id}")

    except Exception as e:
        logger.error(f"‚ùå Error in key command for user {user_id}: {type(e).__name__}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞")


@router.message(Command("search"))
async def search_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /search - –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ n8n"""
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"

    logger.info(f"üîç /search from user {user_id} (@{username})")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = await get_api_key(user_id)
    if not api_key:
        await message.answer(
            "üîë API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /key <–≤–∞—à_–∫–ª—é—á> –∏–ª–∏ /start"
        )
        return

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–ª—é—á
    validation = await validate_billing_key(api_key, "search")
    if not validation.get("valid", False):
        error_msg = validation.get("error", "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á")
        await message.answer(f"‚ùå {error_msg}")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    args = message.text.split(" ", 1)
    if len(args) < 2:
        await message.answer(
            "üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /search –∫–æ–º–ø—å—é—Ç–µ—Ä—ã\n"
            "‚Ä¢ /search —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –¥–æ—Ä–æ–≥"
        )
        return

    query = args[1].strip()

    if len(query) < 2:
        await message.answer("‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ n8n
        logger.info(f"üîç Searching for '{query}' via n8n for user {user_id}")

        loading_msg = await message.answer("üîç –ò—â—É –ª–æ—Ç—ã...")

        async with aiohttp.ClientSession() as session:
            async with session.post(
                n8n_webhook_url,
                json={"query": query},
                timeout=aiohttp.ClientTimeout(total=30),
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    lots = data.get("lots", []) if isinstance(data, dict) else data

                    await loading_msg.delete()

                    if not lots:
                        await message.answer("‚ùå –õ–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É")
                        return

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–¥–æ 5 –ª–æ—Ç–æ–≤)
                    result_lines = [f"üîç <b>–ù–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É:</b> {query}\n"]

                    for i, lot in enumerate(lots[:5], 1):
                        lot_id = lot.get("id", lot.get("lot_id", ""))
                        title = lot.get("title", lot.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))[:100]
                        url = lot.get("url", lot.get("link", ""))

                        result_lines.append(f"üìå <b>{i}.</b> {title}")
                        if url:
                            result_lines.append(f'üîó <a href="{url}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>')
                        if lot_id:
                            result_lines.append(f"üìä –ê–Ω–∞–ª–∏–∑: /lot {lot_id}")
                        result_lines.append("")

                    if len(lots) > 5:
                        result_lines.append(
                            f"üí° –ü–æ–∫–∞–∑–∞–Ω–æ 5 –∏–∑ {len(lots)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤"
                        )

                    result_text = "\n".join(result_lines)
                    await message.answer(
                        result_text, parse_mode="HTML", disable_web_page_preview=True
                    )

                    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                    await log_usage(api_key, "search")
                    logger.info(
                        f"‚úÖ Search completed for user {user_id}: {len(lots)} lots found"
                    )

                else:
                    await loading_msg.delete()
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    logger.error(f"‚ùå n8n webhook error {response.status}")

    except TimeoutError:
        await loading_msg.delete()
        await message.answer("‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞")
        logger.error(f"‚è±Ô∏è Search timeout for user {user_id}")
    except Exception as e:
        try:
            await loading_msg.delete()
        except Exception as delete_err:
            logger.debug("Failed to delete loading message: %s", delete_err)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞")
        logger.error(f"‚ùå Search error for user {user_id}: {type(e).__name__}")


@router.message(Command("lot"))
async def lot_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /lot - –∞–Ω–∞–ª–∏–∑ –ª–æ—Ç–∞"""
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"

    logger.info(f"üìä /lot from user {user_id} (@{username})")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = await get_api_key(user_id)
    if not api_key:
        await message.answer(
            "üîë API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /key <–≤–∞—à_–∫–ª—é—á> –∏–ª–∏ /start"
        )
        return

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–ª—é—á
    validation = await validate_billing_key(api_key, "lot")
    if not validation.get("valid", False):
        error_msg = validation.get("error", "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á")
        await message.answer(f"‚ùå {error_msg}")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ª–æ—Ç–∞
    args = message.text.split(" ", 1)
    if len(args) < 2:
        await message.answer("üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /lot <ID_–ª–æ—Ç–∞>\n–ü—Ä–∏–º–µ—Ä: /lot 123456789")
        return

    lot_id = args[1].strip()

    if not lot_id.isdigit():
        await message.answer("‚ùå ID –ª–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä")
        return

    try:
        logger.info(f"üìä Analyzing lot {lot_id} for user {user_id}")

        loading_msg = await message.answer("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ª–æ—Ç...")

        # –ó–∞–ø—Ä–æ—Å –∫ API Gateway
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{zakupai_api_url}/lot/{lot_id}",
                headers={"X-API-Key": api_key},
                timeout=aiohttp.ClientTimeout(total=30),
            ) as response:
                if response.status == 200:
                    data = await response.json()

                    await loading_msg.delete()

                    # –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
                    result_lines = [f"üìä <b>–ê–Ω–∞–ª–∏–∑ –ª–æ—Ç–∞ {lot_id}</b>\n"]

                    if data.get("title"):
                        result_lines.append(f"üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}")
                    if data.get("price"):
                        result_lines.append(f"üí∞ <b>–¶–µ–Ω–∞:</b> {data['price']} —Ç–≥")
                    if data.get("customer"):
                        result_lines.append(f"üè¢ <b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {data['customer']}")
                    if data.get("risk_score"):
                        risk = data["risk_score"]
                        emoji = "üü¢" if risk < 0.3 else "üü°" if risk < 0.7 else "üî¥"
                        result_lines.append(f"{emoji} <b>–†–∏—Å–∫:</b> {risk:.2f}")

                    result_text = "\n".join(result_lines)
                    await message.answer(result_text, parse_mode="HTML")

                    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                    await log_usage(api_key, "lot")
                    logger.info(f"‚úÖ Lot analysis completed for user {user_id}")

                elif response.status == 404:
                    await loading_msg.delete()
                    await message.answer("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    logger.warning(f"‚ùå Lot {lot_id} not found for user {user_id}")
                else:
                    await loading_msg.delete()
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ç–∞")
                    logger.error(
                        f"‚ùå API Gateway error {response.status} for lot {lot_id}"
                    )

    except TimeoutError:
        await loading_msg.delete()
        await message.answer("‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞")
        logger.error(f"‚è±Ô∏è Lot analysis timeout for user {user_id}")
    except Exception as e:
        try:
            await loading_msg.delete()
        except Exception as delete_err:
            logger.debug("Failed to delete loading message: %s", delete_err)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ç–∞")
        logger.error(f"‚ùå Lot analysis error for user {user_id}: {type(e).__name__}")


@router.message(Command("help"))
async def help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"

    logger.info(f"‚ÑπÔ∏è /help from user {user_id} (@{username})")

    help_text = """
ü§ñ <b>ZakupAI - –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –≥–æ—Å–∑–∞–∫—É–ø–∫–∞–º</b>

<b>üîç –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ API –∫–ª—é—á–∞
‚Ä¢ /key &lt;–∫–ª—é—á&gt; - –ø—Ä–∏–≤—è–∑–∫–∞ API –∫–ª—é—á–∞
‚Ä¢ /search &lt;–∑–∞–ø—Ä–æ—Å&gt; - –ø–æ–∏—Å–∫ –ª–æ—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
‚Ä¢ /lot &lt;ID&gt; - –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ—Ç–∞
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>üí° –ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ <code>/search –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –æ—Ñ–∏—Å–Ω—ã–µ</code>
‚Ä¢ <code>/search —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –¥–æ—Ä–æ–≥</code>
‚Ä¢ <code>/lot 123456789</code>

<b>üîë API –∫–ª—é—á–∏:</b>
–°–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ (/start)
–ò–ª–∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ /key

<b>üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.
"""

    await message.answer(help_text, parse_mode="HTML")


# === WEBHOOK SERVER ===


async def health_handler(request):
    """Health check endpoint"""
    return web.json_response(
        {"status": "ok", "mode": "webhook" if USE_WEBHOOK else "polling"}
    )


async def webhook_handler(request, bot: Bot):
    """Webhook handler for Telegram updates"""
    try:
        data = await request.json()
        logger.debug(
            f"üì® Incoming webhook update: {json.dumps(data, ensure_ascii=False)}"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º secret token
        if WEBHOOK_SECRET:
            received_token = request.headers.get("X-Telegram-Bot-Api-Secret-Token", "")
            if received_token != WEBHOOK_SECRET:
                logger.warning("‚ùå Invalid webhook secret token")
                return web.Response(status=403)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update
        from aiogram.types import Update

        update = Update(**data)
        await dp.feed_update(bot, update)

        return web.Response(status=200)

    except Exception as e:
        logger.error(f"‚ùå Webhook error: {type(e).__name__}: {e}")
        return web.Response(status=500)


# === MAIN APPLICATION ===


@asynccontextmanager
async def lifespan_context():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        await init_db()
        logger.info("‚úÖ Database initialized")

        yield

    finally:
        logger.info("üõë Bot shutting down")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    async with lifespan_context():
        logger.info("üöÄ ZakupAI Telegram Bot starting...")
        logger.info(f"üîß Mode: {'WEBHOOK' if USE_WEBHOOK else 'POLLING'}")
        logger.info(f"üåç Environment: {config.security.environment}")

        if USE_WEBHOOK:
            # Webhook —Ä–µ–∂–∏–º
            webhook_success = await setup_webhook()

            if webhook_success:
                # –°–æ–∑–¥–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä
                app = web.Application()
                app.router.add_get("/health", health_handler)

                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                webhook_requests_handler = SimpleRequestHandler(
                    dispatcher=dp, bot=bot, secret_token=WEBHOOK_SECRET
                )
                webhook_requests_handler.register(app, path="/bot")

                logger.info("üåê Starting webhook server on port 8000")
                logger.info(f"üîó Webhook URL: {WEBHOOK_URL}")
                logger.info(
                    f"üîí Secret token: {'‚úÖ set' if WEBHOOK_SECRET else '‚ùå not set'}"
                )

                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
                runner = web.AppRunner(app)
                await runner.setup()
                site = web.TCPSite(runner, host="0.0.0.0", port=8000)  # nosec B104
                await site.start()

                logger.info("‚úÖ Webhook server started successfully")

                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                try:
                    await asyncio.Future()  # run forever
                except KeyboardInterrupt:
                    logger.info("üëã Received interrupt signal")
                finally:
                    await runner.cleanup()
            else:
                logger.error("‚ùå Failed to setup webhook, falling back to polling")
                await remove_webhook()
                await dp.start_polling(bot)
        else:
            # Polling —Ä–µ–∂–∏–º
            await remove_webhook()
            logger.info("üîÑ Starting polling mode")
            await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã Bot stopped by user")
    except Exception as e:
        logger.error(f"üí• Critical error: {type(e).__name__}: {e}")
