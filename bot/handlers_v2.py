"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram-–±–æ—Ç–∞ ZakupAI v2
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å GraphQL v2 –∏ REST v3
"""

import logging
import re

import httpx
from aiogram import F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
from analytics_service import analytics_service
from db_simple import get_user_api_key, get_user_stats, save_user_api_key
from error_handler import (
    ValidationException,
    check_user_permissions,
    validate_user_input,
)
from services_v2 import (
    billing_service,
    format_search_results,
    goszakup_service,
    search_lots_for_telegram_v2,
)

logger = logging.getLogger(__name__)
router = Router()


async def require_api_key_and_log_usage(
    message: Message, endpoint: str, cost: int = 1
) -> str | None:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""

    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await check_user_permissions(user_id, endpoint):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
        return None

    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    api_key = await get_user_api_key(user_id)
    if not api_key:
        await message.answer(
            "üîë –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–µ–Ω API –∫–ª—é—á.\n"
            "–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ zakupai.kz –∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /key"
        )
        return None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á –∏ –ª–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    validation_result = await billing_service.validate_key_and_log_usage(
        api_key, user_id, endpoint, cost
    )

    if not validation_result.get("valid", False):
        error_msg = validation_result.get("error", "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á")
        await message.answer(f"‚ùå {error_msg}")
        return None

    return api_key


@router.message(CommandStart())
async def start_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""

    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑_–∏–º–µ–Ω–∏"

    logger.info(f"User {user_id} ({username}) started the bot")

    welcome_text = """
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ZakupAI!</b>

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≥–æ—Å–∑–∞–∫—É–ø–∫–∞–º–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞:
‚Ä¢ üîç –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ª–æ—Ç–æ–≤ —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
‚Ä¢ üìä –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–æ–≤ (TL;DR, —Ä–∏—Å–∫–∏, —Ñ–∏–Ω–∞–Ω—Å—ã)
‚Ä¢ üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—á–∞—Å—Ç–∏—é
‚Ä¢ üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∂–∞–ª–æ–±

<b>üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/search &lt;—Å–ª–æ–≤–æ&gt; ‚Äî —É–º–Ω—ã–π –ø–æ–∏—Å–∫ –ª–æ—Ç–æ–≤
/search_advanced ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
/lot &lt;ID&gt; ‚Äî –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ—Ç–∞
/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞
/key &lt;–∫–ª—é—á&gt; ‚Äî –ø—Ä–∏–≤—è–∑–∫–∞ API –∫–ª—é—á–∞
/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

<b>üîë –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞:</b>
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ zakupai.kz
2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ –ø–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /key –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏

<b>üÜï –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ v2:</b>
‚Ä¢ GraphQL v2 API –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π fallback –Ω–∞ REST v3
‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ë–ò–ù, —Å—É–º–º–µ, —Å—Ç–∞—Ç—É—Å—É
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /search –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á! üéØ
"""

    await message.answer(welcome_text, parse_mode="HTML")


@router.message(Command("key"))
async def key_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /key - –ø—Ä–∏–≤—è–∑–∫–∞ API –∫–ª—é—á–∞"""

    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑_–∏–º–µ–Ω–∏"

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    command_args = message.text.split(" ", 1)
    if len(command_args) < 2:
        await message.answer(
            "üîë –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /key <–≤–∞—à_api_–∫–ª—é—á>\n"
            "–ü—Ä–∏–º–µ—Ä: /key 12345678-1234-1234-1234-123456789abc"
        )
        return

    try:
        api_key = await validate_user_input(command_args[1], max_length=100)

        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–∞ (UUID-–ø–æ–¥–æ–±–Ω—ã–π)
        if len(api_key) < 10 or not all(c.isalnum() or c in "-_" for c in api_key):
            raise ValidationException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ billing service
        validation_result = await billing_service.validate_key_and_log_usage(
            api_key, user_id, "key_validation", cost=0
        )

        if not validation_result.get("valid", False):
            error_msg = validation_result.get("error", "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á")
            await message.answer(f"‚ùå {error_msg}")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á
        success = await save_user_api_key(user_id, api_key)
        if not success:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            return

        user_plan = validation_result.get("user_plan", "free")

        await message.answer(
            f"‚úÖ API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n"
            f"üìã –ü–ª–∞–Ω: {user_plan.upper()}\n"
            f"üî¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {validation_result.get('usage_count', 0)}/{validation_result.get('usage_limit', 100)}\n"
            f"üöÄ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!"
        )

        logger.info(f"User {user_id} ({username}) linked API key with plan {user_plan}")

    except ValidationException as e:
        await message.answer(f"‚ùå {str(e)}")
    except Exception as e:
        logger.error(f"Error in key command for user {user_id}: {type(e).__name__}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@router.message(Command("search"))
async def search_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /search - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ª–æ—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á –∏ –ª–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    api_key = await require_api_key_and_log_usage(message, "search", cost=2)
    if not api_key:
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    command_args = message.text.split(" ", 1)
    if len(command_args) < 2:
        await message.answer(
            "üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞>\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /search –ª–∞–∫\n"
            "‚Ä¢ /search –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –æ—Ñ–∏—Å–Ω—ã–µ\n"
            "‚Ä¢ /search —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –¥–æ—Ä–æ–≥\n"
            "‚Ä¢ /search –º–µ–±–µ–ª—å –ë–ò–ù:123456789012\n"
            "‚Ä¢ /search —É–≥–æ–ª—å —Å—É–º–º–∞:100000-500000\n\n"
            "üí° –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π API!"
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –ª–æ–≥–∏—Ä—É–µ–º –µ–≥–æ
        raw_query = command_args[1].strip()
        logger.info(f"User {user_id} raw_query='{raw_query}'")

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å
        normalized_query = raw_query.casefold()

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        query = await validate_user_input(raw_query, max_length=200)
        if len(query) < 2:
            raise ValidationException(
                "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)"
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        loading_msg = await message.answer(
            "üîç –ò—â—É –ª–æ—Ç—ã —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ n8n fallback
        results_text = await search_lots_for_telegram_v2(
            raw_query, limit=10, show_source=True, user_id=user_id
        )
        search_successful = results_text and "‚ùå –õ–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" not in results_text

        if search_successful:
            logger.info(f"User {user_id} search successful")
        else:
            logger.info(
                f"User {user_id} ‚Üí no results for raw='{raw_query}', normalized='{normalized_query}'"
            )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_msg.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await message.answer(
            results_text, parse_mode="HTML", disable_web_page_preview=True
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É API
        stats = goszakup_service.get_search_statistics()
        stats_text = (
            f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API:\n"
            f"GraphQL v2: {stats['v2_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            f"REST v3: {stats['v3_rest_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            f"Fallback: {stats['fallback_requests']} —Å–ª—É—á–∞–µ–≤"
        )

        await message.answer(stats_text)

        logger.info(
            f"User {user_id} search completed: raw='{raw_query}', normalized='{normalized_query}', success={search_successful}"
        )

    except ValidationException as e:
        await message.answer(f"‚ùå {str(e)}")
    except Exception as e:
        logger.error(f"Error in search command for user {user_id}: {type(e).__name__}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@router.message(Command("search_advanced"))
async def search_advanced_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /search_advanced - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = await require_api_key_and_log_usage(message, "search_advanced", cost=3)
    if not api_key:
        return

    # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    command_args = message.text.split(" ", 1)
    if len(command_args) < 2:
        await message.answer(
            "üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫:\n"
            "/search_advanced <–ø–∞—Ä–∞–º–µ—Ç—Ä—ã>\n\n"
            "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            "‚Ä¢ keyword=–º–µ–±–µ–ª—å - –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
            "‚Ä¢ bin=123456789012 - –ë–ò–ù –∑–∞–∫–∞–∑—á–∏–∫–∞\n"
            "‚Ä¢ method=—Ç–µ–Ω–¥–µ—Ä - —Å–ø–æ—Å–æ–± –∑–∞–∫—É–ø–∫–∏\n"
            "‚Ä¢ status=–ø—Ä–∏–µ–º - —Å—Ç–∞—Ç—É—Å –ª–æ—Ç–∞\n"
            "‚Ä¢ min=100000 - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞\n"
            "‚Ä¢ max=500000 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/search_advanced keyword=–∫–æ–º–ø—å—é—Ç–µ—Ä—ã min=50000 max=200000 method=—Ç–µ–Ω–¥–µ—Ä"
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ª–æ–≥–∏—Ä—É–µ–º –∏—Ö
        raw_params_str = command_args[1].strip()
        logger.info(f"User {user_id} raw_query='{raw_params_str}'")

        params_str = await validate_user_input(raw_params_str, max_length=300)

        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = {}
        for param in params_str.split():
            if "=" in param:
                key, value = param.split("=", 1)
                params[key.strip()] = value.strip()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        raw_keyword = params.get("keyword")

        customer_bin = params.get("bin")
        trade_methods = [params.get("method")] if params.get("method") else None
        statuses = [params.get("status")] if params.get("status") else None
        min_amount = float(params["min"]) if params.get("min", "").isdigit() else None
        max_amount = float(params["max"]) if params.get("max", "").isdigit() else None

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not any(
            [raw_keyword, customer_bin, trade_methods, statuses, min_amount, max_amount]
        ):
            raise ValidationException("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∏—Å–∫–∞")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        loading_msg = await message.answer("üîß –í—ã–ø–æ–ª–Ω—è—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
        lots = await goszakup_service.search_lots_advanced(
            keyword=raw_keyword,  # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å–∞–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
            customer_bin=customer_bin,
            trade_methods=trade_methods,
            statuses=statuses,
            min_amount=min_amount,
            max_amount=max_amount,
            limit=15,
            user_id=user_id,
        )

        search_successful = lots and len(lots) > 0

        if search_successful:
            logger.info(
                f"User {user_id} advanced search successful: found {len(lots)} lots"
            )
        else:
            if raw_keyword:
                logger.info(
                    f"User {user_id} ‚Üí no results for advanced search with keyword='{raw_keyword}'"
                )
            else:
                logger.info(
                    f"User {user_id} ‚Üí no results for advanced search without keyword"
                )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_msg.delete()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_text = (
            format_search_results(lots)
            if lots
            else "‚ùå –õ–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞."
        )
        await message.answer(
            results_text, parse_mode="HTML", disable_web_page_preview=True
        )

        logger.info(
            f"User {user_id} advanced search completed: {len(params)} parameters, success={search_successful}"
        )

    except ValidationException as e:
        await message.answer(f"‚ùå {str(e)}")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (min/max)")
    except Exception as e:
        logger.error(f"Error in advanced search for user {user_id}: {type(e).__name__}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")


@router.message(Command("lot"))
async def lot_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /lot - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–æ—Ç–∞"""

    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á –∏ –ª–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–∞–Ω–∞–ª–∏–∑ —Å—Ç–æ–∏—Ç –¥–æ—Ä–æ–∂–µ)
    api_key = await require_api_key_and_log_usage(message, "lot_analysis", cost=5)
    if not api_key:
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ª–æ—Ç–∞
    command_args = message.text.split(" ", 1)
    if len(command_args) < 2:
        await message.answer(
            "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /lot <–Ω–æ–º–µ—Ä_–ª–æ—Ç–∞>\n"
            "–ü—Ä–∏–º–µ—Ä: /lot LOT-123456789\n"
            "–ü—Ä–∏–º–µ—Ä: /lot ANNO-987654321"
        )
        return

    try:
        lot_identifier = await validate_user_input(command_args[1], max_length=50)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        loading_msg = await message.answer("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ...")

        # –ò—â–µ–º –ª–æ—Ç –ø–æ –Ω–æ–º–µ—Ä—É
        lot = await goszakup_service.get_lot_by_number(lot_identifier)

        await loading_msg.delete()

        if not lot:
            await message.answer(f"‚ùå –õ–æ—Ç —Å –Ω–æ–º–µ—Ä–æ–º '{lot_identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ
        lot_info = f"""
üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ</b>

üî¢ <b>–ù–æ–º–µ—Ä –ª–æ—Ç–∞:</b> {lot["id"]}
üì¶ <b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {lot["name"]}
üí∞ <b>–°—É–º–º–∞:</b> {lot["price"]:,.0f} {lot.get("currency", "—Ç–≥")}
üè¢ <b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {lot["customer"]}
"""

        if lot.get("customer_bin"):
            lot_info += f"üèõÔ∏è <b>–ë–ò–ù –∑–∞–∫–∞–∑—á–∏–∫–∞:</b> <code>{lot['customer_bin']}</code>\n"

        if lot.get("trade_method"):
            lot_info += f"üõí <b>–°–ø–æ—Å–æ–± –∑–∞–∫—É–ø–∫–∏:</b> {lot['trade_method']}\n"

        lot_info += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {lot['status']}\n"

        if lot.get("quantity", 0) > 0:
            lot_info += f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {lot['quantity']}\n"

        if lot.get("description"):
            description = (
                lot["description"][:300] + "..."
                if len(lot["description"]) > 300
                else lot["description"]
            )
            lot_info += f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"

        if lot.get("deadline"):
            lot_info += f"‚è∞ <b>–°—Ä–æ–∫:</b> {lot['deadline'][:16]}\n"

        if lot.get("url"):
            lot_info += f"üîó <a href='{lot['url']}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ</a>\n"

        if lot.get("source"):
            source_name = {
                "graphql_v2": "GraphQL v2",
                "graphql_v3": "GraphQL v3",
                "rest_v3": "REST v3",
            }.get(lot["source"], lot["source"])
            lot_info += f"üì° <b>–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:</b> {source_name}\n"

        await message.answer(lot_info, parse_mode="HTML", disable_web_page_preview=True)

        logger.info(f"User {user_id} analyzed lot '{lot_identifier}'")

    except ValidationException as e:
        await message.answer(f"‚ùå {str(e)}")
    except Exception as e:
        logger.error(f"Error in lot command for user {user_id}: {type(e).__name__}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ç–∞")


@router.message(Command("stats"))
async def stats_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–∏—Å—Ç–µ–º—ã"""

    user_id = message.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = await get_user_stats(user_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∏—Å–∫–∞
        search_stats = goszakup_service.get_search_statistics()

        stats_text = f"""
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_id}
üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user_stats.get("created_at", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")[:10] if user_stats.get("created_at") else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
üîë <b>API –∫–ª—é—á:</b> {"‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω" if user_stats.get("api_key") else "‚ùå –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"}
üî¢ <b>–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {user_stats.get("total_requests", 0)}

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞</b>

üöÄ <b>GraphQL v2:</b> {search_stats.get("v2_requests", 0)} –∑–∞–ø—Ä–æ—Å–æ–≤
üîÑ <b>GraphQL v3:</b> {search_stats.get("v3_graphql_requests", 0)} –∑–∞–ø—Ä–æ—Å–æ–≤
üì° <b>REST v3:</b> {search_stats.get("v3_rest_requests", 0)} –∑–∞–ø—Ä–æ—Å–æ–≤
üÜò <b>Fallback:</b> {search_stats.get("fallback_requests", 0)} —Å–ª—É—á–∞–µ–≤
‚ùå <b>–û—à–∏–±–∫–∏:</b> {search_stats.get("failed_requests", 0)} –∑–∞–ø—Ä–æ—Å–æ–≤

üéØ <b>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</b> {search_stats.get("success_rate", 0) * 100:.1f}%

üîß <b>–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API</b>
GraphQL v2: {"‚úÖ" if goszakup_service.is_v2_available() else "‚ùå"}
REST v3: {"‚úÖ" if goszakup_service.is_v3_available() else "‚ùå"}
"""

        await message.answer(stats_text, parse_mode="HTML")

        logger.info(f"User {user_id} requested stats")

    except Exception as e:
        logger.error(f"Error in stats command for user {user_id}: {type(e).__name__}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.message(Command("help"))
async def help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""

    help_text = """
ü§ñ <b>ZakupAI v2 - –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –≥–æ—Å–∑–∞–∫—É–ø–∫–∞–º</b>

<b>üîç –ö–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞:</b>
/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
/search &lt;—Å–ª–æ–≤–∞&gt; ‚Äî —É–º–Ω—ã–π –ø–æ–∏—Å–∫ –ª–æ—Ç–æ–≤
/search_advanced ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
/lot &lt;–Ω–æ–º–µ—Ä&gt; ‚Äî –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ

<b>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
/key &lt;–∫–ª—é—á&gt; ‚Äî –ø—Ä–∏–≤—è–∑–∫–∞ API –∫–ª—é—á–∞
/stats ‚Äî –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
/mystats ‚Äî –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞
/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã):</b>
/analytics ‚Äî –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/popular ‚Äî –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
/top_users ‚Äî —Å–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
/errors ‚Äî –æ—Ç—á–µ—Ç –ø–æ –æ—à–∏–±–∫–∞–º

<b>üßπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã):</b>
/dbinfo ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
/cleanup [–¥–Ω–∏] ‚Äî –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 90)
/autocleanup [—Ä–∞–∑–º–µ—Ä_MB] ‚Äî –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100MB)

<b>üí° –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞:</b>
‚Ä¢ <code>/search –ª–∞–∫</code>
‚Ä¢ <code>/search –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –æ—Ñ–∏—Å–Ω—ã–µ</code>
‚Ä¢ <code>/search –º–µ–±–µ–ª—å –ë–ò–ù:123456789012</code>
‚Ä¢ <code>/search —É–≥–æ–ª—å —Å—É–º–º–∞:100000-500000</code>

<b>üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫:</b>
‚Ä¢ <code>/search_advanced keyword=–∫–æ–º–ø—å—é—Ç–µ—Ä—ã min=50000 max=200000</code>
‚Ä¢ <code>/search_advanced bin=123456789012 method=—Ç–µ–Ω–¥–µ—Ä</code>

<b>üÜï –ù–æ–≤—à–µ—Å—Ç–≤–∞ v2:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ API (GraphQL v2/v3, REST v3)
‚Ä¢ –£–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ë–ò–ù, —Å—É–º–º–∞–º, —Å—Ç–∞—Ç—É—Å–∞–º
‚Ä¢ Fallback —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API

<b>üîë –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞:</b>
1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ zakupai.kz
2. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
3. –ü—Ä–∏–≤—è–∂–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /key

<b>üéØ –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:</b>
‚Ä¢ FREE: 100 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å, 20/—á–∞—Å
‚Ä¢ PREMIUM: 5000 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å, 500/—á–∞—Å

<b>üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É zakupai.kz
"""

    await message.answer(help_text, parse_mode="HTML")


@router.message(Command("hot"))
async def hot_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /hot - –≥–æ—Ä—è—á–∏–µ –ª–æ—Ç—ã (–±—É–¥—É—â–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)"""
    await message.answer(
        "üîß –ö–æ–º–∞–Ω–¥–∞ /hot –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ä—è—á–∏—Ö –ª–æ—Ç–∞—Ö –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.\n"
        "–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤."
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@router.message(F.text.startswith("/"))
async def unknown_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    await message.answer(
        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n\n"
        "üÜï –î–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã v2:\n"
        "‚Ä¢ /search_advanced - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫\n"
        "‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.text)
async def text_message_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = message.text.lower()

    if any(word in text for word in ["–ø—Ä–∏–≤–µ—Ç", "hello", "—Å—Ç–∞—Ä—Ç", "–Ω–∞—á–∞—Ç—å"]):
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ZakupAI –±–æ—Ç v2.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏\n"
            "üÜï –¢–µ–ø–µ—Ä—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ GraphQL v2!"
        )
    elif any(word in text for word in ["–ø–æ–º–æ—â—å", "help", "—á—Ç–æ —É–º–µ–µ—à—å"]):
        await help_command(message)
    elif any(word in text for word in ["–ø–æ–∏—Å–∫", "–Ω–∞–π–¥–∏", "search"]):
        await message.answer(
            "üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search\n"
            "–ü—Ä–∏–º–µ—Ä: /search –∫–æ–º–ø—å—é—Ç–µ—Ä—ã\n"
            "üÜï –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /search_advanced –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞!"
        )
    else:
        await message.answer(
            "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/search - –ø–æ–∏—Å–∫ –ª–æ—Ç–æ–≤\n"
            "/search_advanced - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫\n"
            "/lot - –∞–Ω–∞–ª–∏–∑ –ª–æ—Ç–∞\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞"
        )


@router.message(Command("analytics"))
async def analytics_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""

    # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
    admin_ids = {123456789, 987654321}  # –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤

    if message.from_user.id not in admin_ids:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
        dashboard = analytics_service.get_dashboard_summary(days=7)
        await message.answer(dashboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Analytics command error: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}")


@router.message(Command("popular"))
async def popular_searches_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""

    # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
    admin_ids = {123456789, 987654321}  # –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤

    if message.from_user.id not in admin_ids:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞ –Ω–µ–¥–µ–ª—é
        popular = analytics_service.get_popular_searches_text(days=7, limit=15)
        await message.answer(popular, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Popular searches command error: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {str(e)}")


@router.message(Command("top_users"))
async def top_users_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""

    # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
    admin_ids = {123456789, 987654321}  # –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤

    if message.from_user.id not in admin_ids:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é
        top_users = analytics_service.get_top_users_text(days=7, limit=15)
        await message.answer(top_users, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Top users command error: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")


@router.message(Command("errors"))
async def errors_summary_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–∞—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""

    # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
    admin_ids = {123456789, 987654321}  # –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤

    if message.from_user.id not in admin_ids:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö –∑–∞ –Ω–µ–¥–µ–ª—é
        errors_report = analytics_service.get_error_summary(days=7)
        await message.answer(errors_report, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Errors summary command error: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–∞—Ö: {str(e)}")


@router.message(Command("mystats"))
async def my_stats_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –º–µ—Å—è—Ü
        user_stats = analytics_service.get_user_stats_text(user_id=user_id, days=30)
        await message.answer(user_stats, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"My stats command error: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


@router.message(Command("cleanup"))
async def cleanup_logs_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""

    # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
    admin_ids = {123456789, 987654321}  # –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤

    if message.from_user.id not in admin_ids:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        command_args = message.text.split()
        days_to_keep = 90  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 90 –¥–Ω–µ–π

        if len(command_args) > 1:
            try:
                days_to_keep = int(command_args[1])
                if days_to_keep < 7:
                    await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: 7 –¥–Ω–µ–π")
                    return
                if days_to_keep > 365:
                    await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: 365 –¥–Ω–µ–π")
                    return
            except ValueError:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–Ω–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /cleanup [–¥–Ω–∏]"
                )
                return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        loading_msg = await message.answer(
            f"üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ {days_to_keep} –¥–Ω–µ–π...\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
        )

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
        cleanup_report = analytics_service.cleanup_old_logs(days_to_keep=days_to_keep)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_msg.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        await message.answer(cleanup_report, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Cleanup command error: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {str(e)}")


@router.message(Command("dbinfo"))
async def database_info_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""

    # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
    admin_ids = {123456789, 987654321}  # –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤

    if message.from_user.id not in admin_ids:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_info = analytics_service.get_database_info_text()
        await message.answer(db_info, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Database info command error: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ: {str(e)}")


@router.message(Command("autocleanup"))
async def auto_cleanup_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""

    # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
    admin_ids = {123456789, 987654321}  # –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤

    if message.from_user.id not in admin_ids:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        command_args = message.text.split()
        max_size_mb = 100  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 100 MB

        if len(command_args) > 1:
            try:
                max_size_mb = float(command_args[1])
                if max_size_mb < 10:
                    await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10 MB")
                    return
                if max_size_mb > 1000:
                    await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 1000 MB")
                    return
            except ValueError:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–∑–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /autocleanup [—Ä–∞–∑–º–µ—Ä_MB]"
                )
                return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        loading_msg = await message.answer(
            "ü§ñ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É..."
        )

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É
        cleanup_report = analytics_service.auto_cleanup_by_size(max_size_mb=max_size_mb)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_msg.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        await message.answer(cleanup_report, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Auto cleanup command error: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏: {str(e)}")


# ---------- RNU Validation Command ----------
@router.message(Command("rnu"))
async def cmd_rnu_validation(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /rnu –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —á–µ—Ä–µ–∑ RNU —Ä–µ–µ—Å—Ç—Ä

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    /rnu <–ë–ò–ù>

    –ì–¥–µ –ë–ò–ù - 12-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    """
    user_id = message.from_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        api_key = await require_api_key_and_log_usage(message, "rnu", cost=1)
        if not api_key:
            return

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        command_args = message.text.split()

        if len(command_args) != 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                "üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/rnu <–ë–ò–ù>`\n"
                "üìù –ü—Ä–∏–º–µ—Ä: `/rnu 123456789012`\n\n"
                "–ë–ò–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 12 —Ü–∏—Ñ—Ä.",
                parse_mode="Markdown",
            )
            return

        supplier_bin = command_args[1].strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ë–ò–ù —Ñ–æ—Ä–º–∞—Ç–∞
        if not re.match(r"^\d{12}$", supplier_bin):
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ë–ò–ù!\n\n"
                "–ë–ò–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 12 —Ü–∏—Ñ—Ä –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "üìù –ü—Ä–∏–º–µ—Ä: `123456789012`",
                parse_mode="Markdown",
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_msg = await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–ò–ù –≤ —Ä–µ–µ—Å—Ç—Ä–µ RNU...")

        # –í—ã–∑—ã–≤–∞–µ–º RNU API —á–µ—Ä–µ–∑ risk-engine
        risk_engine_url = "http://risk-engine:8000"  # Docker service name
        rnu_url = f"{risk_engine_url}/validate_rnu/{supplier_bin}"

        async with httpx.AsyncClient(timeout=10.0) as client:
            try:
                response = await client.get(rnu_url)

                # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                await loading_msg.delete()

                if response.status_code == 200:
                    result = response.json()

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    status_icon = "üî¥" if result["is_blocked"] else "üü¢"
                    status_text = (
                        "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if result["is_blocked"] else "–ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
                    )
                    source_text = "–∫—ç—à" if result["source"] == "cache" else "API"

                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    from datetime import datetime

                    try:
                        validated_dt = datetime.fromisoformat(
                            result["validated_at"].replace("Z", "+00:00")
                        )
                        validated_str = validated_dt.strftime("%d.%m.%Y %H:%M")
                    except Exception:
                        validated_str = result["validated_at"]

                    response_text = (
                        f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ RNU**\n\n"
                        f"üè¢ **–ë–ò–ù:** `{supplier_bin}`\n"
                        f"{status_icon} **–°—Ç–∞—Ç—É—Å:** {status_text}\n"
                        f"üìÖ **–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:** {validated_str}\n"
                        f"üíæ **–ò—Å—Ç–æ—á–Ω–∏–∫:** {source_text}\n\n"
                    )

                    if result["is_blocked"]:
                        response_text += (
                            "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–µ—Å—Ç—Ä–µ –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (RNU).\n"
                            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—è–≤–∏—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–º."
                        )
                    else:
                        response_text += (
                            "‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä–µ –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
                            "–≠—Ç–æ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–∏—Å–∫–æ–≤, –Ω–æ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ñ–∞–∫—Ç–æ—Ä–æ–º."
                        )

                    await message.answer(response_text, parse_mode="Markdown")

                    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∏–ª–ª–∏–Ω–≥–∞
                    await billing_service.log_usage(
                        user_id=user_id, service="rnu_validation", requests=1, cost=1
                    )

                elif response.status_code == 400:
                    error_detail = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error_detail}")

                elif response.status_code == 429:
                    await message.answer(
                        "‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ RNU API.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                    )

                elif response.status_code == 503:
                    await message.answer(
                        "üîß –°–µ—Ä–≤–∏—Å RNU –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
                    )

                else:
                    logger.error(
                        f"RNU API returned unexpected status: {response.status_code}"
                    )
                    await message.answer(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É RNU.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
                    )

            except httpx.TimeoutException:
                await loading_msg.delete()
                await message.answer(
                    "‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –∏—Å—Ç–µ–∫–ª–æ.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
                )

            except httpx.RequestError as e:
                logger.error(f"RNU request error: {e}")
                await loading_msg.delete()
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É RNU.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
                )

    except Exception as e:
        logger.error(f"RNU command error for user {user_id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
        )
