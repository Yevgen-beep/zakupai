"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram-–±–æ—Ç–∞ ZakupAI
"""

import asyncio
import logging
from datetime import datetime

from aiogram import F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from db_simple import get_user_api_key, get_user_stats, save_user_api_key
from error_handler import (
    ValidationException,
    check_user_permissions,
    validate_user_input,
)
from models import (
    LotAnalysisResult,
    RiskScoreResponse,
    TLDRResponse,
    VATResponse,
    extract_lot_id_from_url,
    validate_lot_id,
)

from services import (
    billing_service,
    format_lot_analysis,
    format_search_results,
    goszakup_service,
    zakupai_service,
)

logger = logging.getLogger(__name__)
router = Router()


async def require_api_key_and_log_usage(
    message: Message, endpoint: str, cost: int = 1
) -> str | None:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""

    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await check_user_permissions(user_id, endpoint):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
        return None

    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    api_key = await get_user_api_key(user_id)
    if not api_key:
        await message.answer(
            "üîë API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /key <–≤–∞—à_–∫–ª—é—á> –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–ª—é—á–∞"
        )
        return None

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–ª—é—á –∏ –ª–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    validation_result = await billing_service.validate_key_and_log_usage(
        api_key, user_id, endpoint, cost
    )

    if not validation_result.get("valid", False):
        error_msg = validation_result.get("error", "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–ª—é—á–∞")
        await message.answer(error_msg)
        return None

    return api_key


@router.message(CommandStart())
async def start_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"""

    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑_–∏–º–µ–Ω–∏"

    logger.info(f"User {user_id} (@{username}) started the bot")

    welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>ZakupAI</b>!

ü§ñ –Ø –ø–æ–º–æ–≥–∞—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–∫—É–ø–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞:
‚Ä¢ üîç –ü–æ–∏—Å–∫ –ª–æ—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
‚Ä¢ üìä –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–æ–≤ (TL;DR, —Ä–∏—Å–∫–∏, —Ñ–∏–Ω–∞–Ω—Å—ã)
‚Ä¢ üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—á–∞—Å—Ç–∏—é
‚Ä¢ üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∂–∞–ª–æ–±

<b>üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/search <—Å–ª–æ–≤–æ> ‚Äî –ø–æ–∏—Å–∫ –ª–æ—Ç–æ–≤
/lot <ID> ‚Äî –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ—Ç–∞
/key <–∫–ª—é—á> ‚Äî –ø—Ä–∏–≤—è–∑–∫–∞ API –∫–ª—é—á–∞
/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

<b>üîë –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞:</b>
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ zakupai.kz
2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ –ø–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /key –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /search –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á! üéØ
"""

    await message.answer(welcome_text, parse_mode="HTML")


@router.message(Command("key"))
async def key_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /key - –ø—Ä–∏–≤—è–∑–∫–∞ API –∫–ª—é—á–∞"""

    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑_–∏–º–µ–Ω–∏"

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    command_args = message.text.split(" ", 1)
    if len(command_args) < 2:
        await message.answer(
            "üîë –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /key <–≤–∞—à_api_–∫–ª—é—á>\n"
            "–ü—Ä–∏–º–µ—Ä: /key 12345678-1234-1234-1234-123456789abc"
        )
        return

    try:
        api_key = await validate_user_input(command_args[1], max_length=100)

        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–∞ (UUID-–ø–æ–¥–æ–±–Ω—ã–π)
        if len(api_key) < 10 or not all(c.isalnum() or c in "-_" for c in api_key):
            raise ValidationException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ billing service
        validation_result = await billing_service.validate_key_and_log_usage(
            api_key, user_id, "key_validation", cost=0
        )

        if not validation_result.get("valid", False):
            error_msg = validation_result.get("error", "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á")
            await message.answer(f"‚ùå {error_msg}")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á
        success = await save_user_api_key(user_id, api_key)
        if not success:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            return

        user_plan = validation_result.get("user_plan", "free")

        await message.answer(
            f"‚úÖ API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n"
            f"üìã –ü–ª–∞–Ω: {user_plan.upper()}\n"
            f"üöÄ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"
        )

        logger.info(
            f"User {user_id} (@{username}) connected API key (plan: {user_plan})"
        )

    except ValidationException as e:
        await message.answer(f"‚ùå {str(e)}")
    except Exception as e:
        logger.error(f"Error in key command for user {user_id}: {type(e).__name__}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@router.message(Command("search"))
async def search_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /search - –ø–æ–∏—Å–∫ –ª–æ—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""

    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á –∏ –ª–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    api_key = await require_api_key_and_log_usage(message, "search", cost=2)
    if not api_key:
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    command_args = message.text.split(" ", 1)
    if len(command_args) < 2:
        await message.answer(
            "üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞>\n"
            "–ü—Ä–∏–º–µ—Ä: /search –∫–æ–º–ø—å—é—Ç–µ—Ä—ã\n"
            "–ü—Ä–∏–º–µ—Ä: /search —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –¥–æ—Ä–æ–≥"
        )
        return

    try:
        query = await validate_user_input(command_args[1], max_length=200)

        if len(query) < 2:
            raise ValidationException(
                "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)"
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        loading_msg = await message.answer(
            "üîç –ò—â—É –ª–æ—Ç—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
        )

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        lots = await goszakup_service.search_lots(query, limit=10)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_msg.delete()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_text = format_search_results(lots)
        await message.answer(
            results_text, parse_mode="HTML", disable_web_page_preview=True
        )

        logger.info(f"User {user_id} searched for '{query}' - found {len(lots)} lots")

    except ValidationException as e:
        await message.answer(f"‚ùå {str(e)}")
    except Exception as e:
        logger.error(f"Error in search command for user {user_id}: {type(e).__name__}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@router.message(Command("lot"))
async def lot_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /lot - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–æ—Ç–∞"""

    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á –∏ –ª–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–∞–Ω–∞–ª–∏–∑ —Å—Ç–æ–∏—Ç –¥–æ—Ä–æ–∂–µ)
    api_key = await require_api_key_and_log_usage(message, "lot_analysis", cost=5)
    if not api_key:
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ª–æ—Ç–∞
    command_args = message.text.split(" ", 1)
    if len(command_args) < 2:
        await message.answer(
            "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /lot <ID_–ª–æ—Ç–∞ –∏–ª–∏ URL>\n"
            "–ü—Ä–∏–º–µ—Ä: /lot 123456789\n"
            "–ü—Ä–∏–º–µ—Ä: /lot https://goszakup.gov.kz/ru/announce/index/123456789"
        )
        return

    try:
        lot_input = await validate_user_input(command_args[1], max_length=500)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ ID –∏–ª–∏ URL
        if lot_input.startswith("http"):
            lot_id = extract_lot_id_from_url(lot_input)
            if not lot_id:
                raise ValidationException("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ª–æ—Ç–∞ –∏–∑ URL")
        else:
            lot_id = lot_input

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º ID –ª–æ—Ç–∞
        if not validate_lot_id(lot_id):
            raise ValidationException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ª–æ—Ç–∞")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–Ω–∞–ª–∏–∑–µ
        loading_msg = await message.answer(
            "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ª–æ—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã"
        )

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        start_time = datetime.now()

        tasks = [
            zakupai_service.get_tldr(lot_id, api_key),
            zakupai_service.get_risk_score(lot_id, api_key),
            zakupai_service.calculate_vat(
                100000, api_key
            ),  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        ]

        results = await asyncio.gather(*tasks, return_exceptions=True)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        tldr_result, risk_result, vat_result = results

        analysis = LotAnalysisResult(
            lot_id=lot_id,
            tldr=tldr_result if isinstance(tldr_result, TLDRResponse) else None,
            risk=risk_result if isinstance(risk_result, RiskScoreResponse) else None,
            finance=vat_result if isinstance(vat_result, VATResponse) else None,
            errors=[str(r) for r in results if isinstance(r, Exception)],
            analysis_time=(datetime.now() - start_time).total_seconds(),
            analyzed_at=datetime.now(),
        )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_msg.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        analysis_text = format_lot_analysis(analysis)
        await message.answer(
            analysis_text, parse_mode="HTML", disable_web_page_preview=True
        )

        logger.info(
            f"User {user_id} analyzed lot {lot_id} in {analysis.analysis_time:.2f}s"
        )

    except ValidationException as e:
        await message.answer(f"‚ùå {str(e)}")
    except Exception as e:
        logger.error(f"Error in lot analysis for user {user_id}: {type(e).__name__}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@router.message(Command("stats"))
async def stats_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è)
    api_key = await require_api_key_and_log_usage(message, "stats", cost=0)
    if not api_key:
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã
        user_stats = await get_user_stats(user_id)

        if not user_stats:
            await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return

        stats_text = f"""
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_stats.registered_at.strftime('%d.%m.%Y')}
üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {user_stats.last_updated.strftime('%d.%m.%Y %H:%M')}
üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {user_stats.requests_count or 0}

{"üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if user_stats.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤!
"""

        await message.answer(stats_text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Error getting stats for user {user_id}: {type(e).__name__}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.message(Command("help"))
async def help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""

    help_text = """
ü§ñ <b>ZakupAI - –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –≥–æ—Å–∑–∞–∫—É–ø–∫–∞–º</b>

<b>üîç –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
/key &lt;–∫–ª—é—á&gt; ‚Äî –ø—Ä–∏–≤—è–∑–∫–∞ API –∫–ª—é—á–∞
/search &lt;—Å–ª–æ–≤–∞&gt; ‚Äî –ø–æ–∏—Å–∫ –ª–æ—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
/lot &lt;ID&gt; ‚Äî –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ—Ç–∞
/stats ‚Äî –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>üí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ <code>/search –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –æ—Ñ–∏—Å–Ω—ã–µ</code>
‚Ä¢ <code>/search —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –¥–æ—Ä–æ–≥</code>
‚Ä¢ <code>/lot 123456789</code>
‚Ä¢ <code>/lot https://goszakup.gov.kz/ru/announce/index/123456789</code>

<b>üîë –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞:</b>
1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ zakupai.kz
2. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
3. –ü—Ä–∏–≤—è–∂–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /key

<b>üéØ –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:</b>
‚Ä¢ FREE: 100 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å, 20/—á–∞—Å
‚Ä¢ PREMIUM: 5000 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å, 500/—á–∞—Å

<b>üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É zakupai.kz

<b>üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã, API –∫–ª—é—á–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.
"""

    await message.answer(help_text, parse_mode="HTML")


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±—É–¥—É—â–∏—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π


@router.message(Command("risk"))
async def risk_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /risk - –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∏—Å–∫-–∞–Ω–∞–ª–∏–∑ (–±—É–¥—É—â–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)"""

    await message.answer(
        "üîß –ö–æ–º–∞–Ω–¥–∞ /risk –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∏—Å–∫-–∞–Ω–∞–ª–∏–∑ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.\n"
        "–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /lot –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤."
    )


@router.message(Command("profit"))
async def profit_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /profit - –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ (–±—É–¥—É—â–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)"""

    await message.answer(
        "üîß –ö–æ–º–∞–Ω–¥–∞ /profit –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–∏—è –≤ —Ç–µ–Ω–¥–µ—Ä–µ.\n"
        "–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /lot –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
    )


@router.message(Command("complaint"))
async def complaint_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /complaint - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∂–∞–ª–æ–± (–±—É–¥—É—â–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)"""

    await message.answer(
        "üîß –ö–æ–º–∞–Ω–¥–∞ /complaint –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∂–∞–ª–æ–± –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ —Ç–µ–Ω–¥–µ—Ä–∞—Ö.\n"
        "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
    )


@router.message(Command("hot"))
async def hot_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /hot - –≥–æ—Ä—è—á–∏–µ –ª–æ—Ç—ã (–±—É–¥—É—â–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)"""

    await message.answer(
        "üîß –ö–æ–º–∞–Ω–¥–∞ /hot –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ä—è—á–∏—Ö –ª–æ—Ç–∞—Ö –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.\n"
        "–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤."
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@router.message(F.text.startswith("/"))
async def unknown_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""

    await message.answer(
        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.text)
async def text_message_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

    text = message.text.lower()

    # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    if any(word in text for word in ["–ø—Ä–∏–≤–µ—Ç", "hello", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π"]):
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ZakupAI –±–æ—Ç.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
        )
    elif any(word in text for word in ["–ø–æ–º–æ—â—å", "help", "—á—Ç–æ —É–º–µ–µ—à—å"]):
        await help_command(message)
    elif any(word in text for word in ["–ø–æ–∏—Å–∫", "–Ω–∞–π–¥–∏", "search"]):
        await message.answer(
            "üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search\n" "–ü—Ä–∏–º–µ—Ä: /search –∫–æ–º–ø—å—é—Ç–µ—Ä—ã"
        )
    else:
        await message.answer(
            "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/search - –ø–æ–∏—Å–∫ –ª–æ—Ç–æ–≤\n"
            "/lot - –∞–Ω–∞–ª–∏–∑ –ª–æ—Ç–∞\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞"
        )
