"""
–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è ZakupAI
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
"""

import logging
from datetime import datetime

from user_metrics import metrics_service

logger = logging.getLogger(__name__)


class AnalyticsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        self.metrics = metrics_service

    def get_dashboard_summary(self, days: int = 7) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏

        Args:
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            stats = self.metrics.get_system_stats(days=days)

            if not stats:
                return "üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."

            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_searches = stats.get("total_searches", 0)
            active_users = stats.get("active_users", 0)
            success_rate = stats.get("success_rate", 0)
            avg_results = stats.get("avg_results_per_search", 0)
            avg_time = stats.get("avg_execution_time_ms", 0)
            error_count = stats.get("error_count", 0)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ API
            api_usage = stats.get("api_usage", {})

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            summary = f"""üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω–µ–π**

üîç **–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**
‚îú‚îÄ –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: **{total_searches:,}**
‚îú‚îÄ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{active_users}**
‚îú‚îÄ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: **{success_rate:.1f}%**
‚îú‚îÄ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: **{avg_time:.0f}–º—Å**
‚îú‚îÄ –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: **{avg_results:.1f} –ª–æ—Ç–æ–≤**
‚îî‚îÄ –û—à–∏–±–æ–∫: **{error_count}**

üöÄ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API:**"""

            for api_name, count in api_usage.items():
                percentage = (count / total_searches * 100) if total_searches > 0 else 0
                api_display = {
                    "v2": "GraphQL v2",
                    "v3_rest": "REST v3",
                    "v3_gql": "GraphQL v3",
                    "rest_v3_fallback": "Fallback REST",
                    "unknown": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                }.get(api_name, api_name)

                summary += f"\n‚îú‚îÄ {api_display}: **{count}** ({percentage:.1f}%)"

            return summary

        except Exception as e:
            logger.error(f"Failed to get dashboard summary: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"

    def get_popular_searches_text(self, days: int = 7, limit: int = 10) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞

        Args:
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
        """
        try:
            popular_searches = self.metrics.get_popular_searches(days=days, limit=limit)

            if not popular_searches:
                return f"üîç **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞ {days} –¥–Ω–µ–π**\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."

            text = f"üîç **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞ {days} –¥–Ω–µ–π**\n"

            for i, search in enumerate(popular_searches, 1):
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                query_display = (
                    search.query[:50] + "..."
                    if len(search.query) > 50
                    else search.query
                )

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞
                time_ago = datetime.now() - search.last_searched

                if time_ago.days > 0:
                    time_str = f"{time_ago.days}–¥ –Ω–∞–∑–∞–¥"
                elif time_ago.seconds > 3600:
                    hours = time_ago.seconds // 3600
                    time_str = f"{hours}—á –Ω–∞–∑–∞–¥"
                else:
                    minutes = time_ago.seconds // 60
                    time_str = f"{minutes}–º –Ω–∞–∑–∞–¥"

                text += f"\n{i}. **{query_display}**"
                text += f"\n   ‚îî‚îÄ {search.count} —Ä–∞–∑, {time_str}"

            return text

        except Exception as e:
            logger.error(f"Failed to get popular searches: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {str(e)}"

    def get_user_stats_text(self, user_id: int, days: int = 30) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            user_analytics = self.metrics.get_user_analytics(user_id, days=days)

            if not user_analytics:
                return f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω–µ–π**\n\nü§∑‚Äç‚ôÇÔ∏è –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç.\n–ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º!"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            time_ago = datetime.now() - user_analytics.last_activity

            if time_ago.days > 0:
                activity_str = f"{time_ago.days} –¥–Ω. –Ω–∞–∑–∞–¥"
            elif time_ago.seconds > 3600:
                hours = time_ago.seconds // 3600
                activity_str = f"{hours} —á. –Ω–∞–∑–∞–¥"
            else:
                minutes = time_ago.seconds // 60
                activity_str = f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–∞–º–æ–≥–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            top_query = user_analytics.most_searched_query
            if len(top_query) > 50:
                top_query = top_query[:50] + "..."

            text = f"""üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω–µ–π**

üîç **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚îú‚îÄ –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: **{user_analytics.total_searches}**
‚îú‚îÄ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: **{user_analytics.unique_queries}**
‚îú‚îÄ –°—Ä–µ–¥–Ω–µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: **{user_analytics.avg_results_per_search:.1f} –ª–æ—Ç–æ–≤**
‚îî‚îÄ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: **{activity_str}**

‚≠ê **–¢–æ–ø –∑–∞–ø—Ä–æ—Å:** "{top_query}\""""

            return text

        except Exception as e:
            logger.error(f"Failed to get user stats: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"

    def get_top_users_text(self, days: int = 7, limit: int = 10) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        Args:
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        """
        try:
            top_users = self.metrics.get_top_users(days=days, limit=limit)

            if not top_users:
                return f"üë• **–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ {days} –¥–Ω–µ–π**\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

            text = f"üë• **–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ {days} –¥–Ω–µ–π**\n"

            for i, user in enumerate(top_users, 1):
                # –ú–∞—Å–∫–∏—Ä—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
                masked_id = f"***{str(user['user_id'])[-3:]}"

                # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                last_activity = datetime.fromisoformat(user["last_activity"])
                time_ago = datetime.now() - last_activity

                if time_ago.days > 0:
                    time_str = f"{time_ago.days}–¥"
                elif time_ago.seconds > 3600:
                    hours = time_ago.seconds // 3600
                    time_str = f"{hours}—á"
                else:
                    minutes = time_ago.seconds // 60
                    time_str = f"{minutes}–º"

                text += f"\n{i}. User {masked_id}"
                text += f"\n   ‚îú‚îÄ –ü–æ–∏—Å–∫–æ–≤: **{user['search_count']}**"
                text += f"\n   ‚îú‚îÄ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: **{user['unique_queries']}**"
                text += f"\n   ‚îî‚îÄ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {time_str} –Ω–∞–∑–∞–¥"

            return text

        except Exception as e:
            logger.error(f"Failed to get top users: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}"

    def cleanup_old_logs(self, days_to_keep: int = 90) -> str:
        """
        –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º

        Args:
            days_to_keep: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –æ—á–∏—Å—Ç–∫–µ
        """
        try:
            cleanup_stats = self.metrics.cleanup_old_logs(days_to_keep=days_to_keep)

            if "error" in cleanup_stats:
                return f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {cleanup_stats['error']}"

            deleted = cleanup_stats.get("deleted_count", 0)
            total_before = cleanup_stats.get("total_before", 0)
            total_after = cleanup_stats.get("total_after", 0)
            days_kept = cleanup_stats.get("days_kept", days_to_keep)

            if deleted == 0:
                return f"‚úÖ **–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ä—à–µ {days_kept} –¥–Ω–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: **{total_after}**"

            percentage_deleted = (
                (deleted / total_before * 100) if total_before > 0 else 0
            )

            text = f"""üßπ **–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚îú‚îÄ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: **{deleted:,}**
‚îú‚îÄ –ë—ã–ª–æ –∑–∞–ø–∏—Å–µ–π: **{total_before:,}**
‚îú‚îÄ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π: **{total_after:,}**
‚îú‚îÄ –£–¥–∞–ª–µ–Ω–æ: **{percentage_deleted:.1f}%**
‚îî‚îÄ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∑–∞: **{days_kept} –¥–Ω–µ–π**

üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (VACUUM –≤—ã–ø–æ–ª–Ω–µ–Ω)
‚è∞ –î–∞—Ç–∞ –æ—á–∏—Å—Ç–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""

            return text

        except Exception as e:
            logger.error(f"Failed to format cleanup report: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {str(e)}"

    def get_database_info_text(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞

        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            db_info = self.metrics.get_database_info()

            if "error" in db_info:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ: {db_info['error']}"

            size_mb = db_info.get("db_size_mb", 0)
            total_records = db_info.get("total_records", 0)
            recent_records = db_info.get("recent_records_30d", 0)
            oldest_record = db_info.get("oldest_record")
            newest_record = db_info.get("newest_record")

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –±–∞–∑—ã
            age_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            if oldest_record:
                try:
                    oldest_date = datetime.fromisoformat(oldest_record)
                    age_days = (datetime.now() - oldest_date).days
                    age_text = f"{age_days} –¥–Ω–µ–π"
                except Exception:
                    age_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—Ä–∞
            if size_mb < 10:
                size_status = "üü¢ –ú–∞–ª—ã–π"
            elif size_mb < 50:
                size_status = "üü° –°—Ä–µ–¥–Ω–∏–π"
            elif size_mb < 100:
                size_status = "üü† –ë–æ–ª—å—à–æ–π"
            else:
                size_status = "üî¥ –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π"

            text = f"""üíæ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö**

üìä **–†–∞–∑–º–µ—Ä –∏ –∑–∞–ø–∏—Å–∏:**
‚îú‚îÄ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: **{size_mb:.1f} MB** {size_status}
‚îú‚îÄ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: **{total_records:,}**
‚îú‚îÄ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: **{recent_records:,}**
‚îî‚îÄ –í–æ–∑—Ä–∞—Å—Ç –±–∞–∑—ã: **{age_text}**

üìÖ **–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:**
‚îú‚îÄ –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å: {oldest_record[:19] if oldest_record else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
‚îî‚îÄ –°–∞–º–∞—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {newest_record[:19] if newest_record else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**"""

            if size_mb > 100:
                text += "\nüî¥ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–∞—è, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞"
            elif size_mb > 50:
                text += "\nüü† –†–∞–∑–º–µ—Ä –±–∞–∑—ã —É–º–µ—Ä–µ–Ω–Ω—ã–π, –º–æ–Ω–∏—Ç–æ—Ä–∏–º —Ä–æ—Å—Ç"
            else:
                text += "\nüü¢ –†–∞–∑–º–µ—Ä –±–∞–∑—ã –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π"

            return text

        except Exception as e:
            logger.error(f"Failed to get database info text: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ: {str(e)}"

    def auto_cleanup_by_size(self, max_size_mb: float = 100) -> str:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É –±–∞–∑—ã —Å –æ—Ç—á–µ—Ç–æ–º

        Args:
            max_size_mb: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –≤ MB

        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–µ
        """
        try:
            cleanup_result = self.metrics.auto_cleanup_by_size(max_size_mb=max_size_mb)

            if cleanup_result is None:
                db_info = self.metrics.get_database_info()
                current_size = db_info.get("db_size_mb", 0)
                return f"‚úÖ **–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è**\n\n–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã: **{current_size:.1f} MB**\n–õ–∏–º–∏—Ç: **{max_size_mb} MB**"

            if "error" in cleanup_result:
                return f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏: {cleanup_result['error']}"

            deleted = cleanup_result.get("deleted_count", 0)
            size_before = cleanup_result.get("size_before_mb", 0)
            size_after = cleanup_result.get("size_after_mb", 0)
            size_saved = size_before - size_after

            text = f"""ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞**

üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:**
‚îú‚îÄ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: **{deleted:,}**
‚îú‚îÄ –†–∞–∑–º–µ—Ä –¥–æ –æ—á–∏—Å—Ç–∫–∏: **{size_before:.1f} MB**
‚îú‚îÄ –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: **{size_after:.1f} MB**
‚îú‚îÄ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: **{size_saved:.1f} MB**
‚îî‚îÄ –õ–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞: **{max_size_mb} MB**

‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""

            return text

        except Exception as e:
            logger.error(f"Failed auto cleanup by size: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏: {str(e)}"

    def export_stats_csv(self, days: int = 30) -> str:
        """
        –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ CSV —Ñ–æ—Ä–º–∞—Ç (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)

        Args:
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞

        Returns:
            CSV —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        # –≠—Ç–æ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        return "üöß CSV —ç–∫—Å–ø–æ—Ä—Ç –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω."

    def get_error_summary(self, days: int = 7) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –æ—à–∏–±–∫–∞–º

        Args:
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–∞—Ö
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.metrics.get_system_stats(days=days)
            error_count = stats.get("error_count", 0)
            total_searches = stats.get("total_searches", 0)

            if error_count == 0:
                return f"‚úÖ **–û—Ç—á–µ—Ç –ø–æ –æ—à–∏–±–∫–∞–º –∑–∞ {days} –¥–Ω–µ–π**\n\n–û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ! üéâ"

            error_rate = (
                (error_count / total_searches * 100) if total_searches > 0 else 0
            )

            text = f"""‚ö†Ô∏è **–û—Ç—á–µ—Ç –ø–æ –æ—à–∏–±–∫–∞–º –∑–∞ {days} –¥–Ω–µ–π**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚îú‚îÄ –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: **{error_count}**
‚îú‚îÄ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: **{error_rate:.1f}%**
‚îî‚îÄ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: **{total_searches - error_count}**

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:**
{"üî¥ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫!" if error_rate > 10 else "üü° –£—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫ –≤ –Ω–æ—Ä–º–µ." if error_rate > 5 else "üü¢ –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫."}"""

            return text

        except Exception as e:
            logger.error(f"Failed to get error summary: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–∞—Ö: {str(e)}"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
analytics_service = AnalyticsService()
