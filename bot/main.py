import asyncio
import logging
import time
from collections import defaultdict
from contextlib import asynccontextmanager
from functools import wraps

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.utils.markdown import hbold, hcode
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from client import ZakupaiAPIClient, get_command_endpoint
from config import config
from db_simple import get_api_key, init_db, save_api_key
from error_handler import ErrorHandlingMiddleware

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TOKEN = config.telegram.bot_token

# –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ dev —Ä–µ–∂–∏–º–µ
if TOKEN.endswith("_") or "AAAA" in TOKEN:
    logger.warning(
        "‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è dev/placeholder —Ç–æ–∫–µ–Ω - –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–∫–∏"
    )
    DEV_MODE = True
else:
    DEV_MODE = config.security.environment == "development"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
dp.message.middleware(ErrorHandlingMiddleware())

# API –∫–ª–∏–µ–Ω—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
api_client = ZakupaiAPIClient()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
user_search_sessions = {}

# –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: webhook –∏–ª–∏ polling
USE_WEBHOOK = bool(
    config.telegram.webhook_url and config.security.environment != "development"
)


# Rate limiting —Å–∏—Å—Ç–µ–º–∞
class RateLimiter:
    """–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ rate limiting –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞"""

    def __init__(self, max_requests: int = None, window_seconds: int = 60):
        self.max_requests = max_requests or config.security.max_requests_per_minute
        self.window_seconds = window_seconds
        self.requests: dict[int, list[float]] = defaultdict(list)

    def is_allowed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        now = time.time()
        user_requests = self.requests[user_id]

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.requests[user_id] = [
            req_time
            for req_time in user_requests
            if now - req_time < self.window_seconds
        ]

        if len(self.requests[user_id]) >= self.max_requests:
            return False

        self.requests[user_id].append(now)
        return True

    def get_remaining_requests(self, user_id: int) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return max(0, self.max_requests - len(self.requests.get(user_id, [])))


# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π rate limiter –¥–ª—è /search (1 –∑–∞–ø—Ä–æ—Å/—Å–µ–∫—É–Ω–¥–∞)
class SearchRateLimiter:
    """Rate limiter –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /search (1 –∑–∞–ø—Ä–æ—Å –≤ —Å–µ–∫—É–Ω–¥—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)"""

    def __init__(self):
        self.last_request: dict[int, float] = {}

    def is_allowed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ search –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        now = time.time()
        last_time = self.last_request.get(user_id, 0)

        if now - last_time < 1.0:  # 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            return False

        self.last_request[user_id] = now
        return True

    def get_next_allowed_time(self, user_id: int) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å"""
        last_time = self.last_request.get(user_id, 0)
        return max(0, 1.0 - (time.time() - last_time))


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ rate limiters
rate_limiter = RateLimiter()
search_rate_limiter = SearchRateLimiter()


# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —Å rate limiting
def validate_and_log_bot(require_key: bool = True):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ API –∫–ª—é—á–∞, rate limiting –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """

    def decorator(func):
        @wraps(func)
        async def wrapper(message: Message, *args, **kwargs):
            user_id = message.from_user.id
            username = message.from_user.username or "unknown"
            endpoint = get_command_endpoint(message.text or "")

            # Rate limiting –ø—Ä–æ–≤–µ—Ä–∫–∞
            if not rate_limiter.is_allowed(user_id):
                remaining = rate_limiter.get_remaining_requests(user_id)
                await message.answer(
                    f"‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({config.security.max_requests_per_minute}/–º–∏–Ω).\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É. –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}"
                )
                logger.warning(
                    f"Rate limit exceeded for user {user_id} (@{username}) on endpoint '{endpoint}'"
                )
                return

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è /search
            if endpoint == "search" and not search_rate_limiter.is_allowed(user_id):
                wait_time = search_rate_limiter.get_next_allowed_time(user_id)
                await message.answer(
                    f"‚è±Ô∏è –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É.\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {wait_time:.1f} —Å–µ–∫—É–Ω–¥."
                )
                logger.warning(
                    f"Search rate limit exceeded for user {user_id} (@{username})"
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
            api_key = (
                await get_api_key(user_id) if require_key or not DEV_MODE else None
            )

            if require_key and not DEV_MODE:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
                if not api_key:
                    await message.answer(
                        f"üîë –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏ API –∫–ª—é—á:\n{hcode('/key YOUR_API_KEY')}"
                    )
                    logger.info(
                        f"User {user_id} (@{username}) attempted to use {endpoint} without API key"
                    )
                    return

                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ Billing Service
                if not await api_client.validate_key(api_key, endpoint):
                    await message.answer(
                        "‚ùå API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç.\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                    logger.warning(
                        f"Invalid/expired API key used by user {user_id} (@{username}) for endpoint '{endpoint}'"
                    )
                    return

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
            logger.info(
                f"Processing {endpoint} command for user {user_id} (@{username})"
            )

            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            try:
                result = await func(message, *args, **kwargs)
                logger.debug(f"Successfully processed {endpoint} for user {user_id}")
            except Exception as e:
                logger.error(
                    f"Error processing {endpoint} for user {user_id}: {type(e).__name__}"
                )
                raise

            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á –∏ –Ω–µ dev —Ä–µ–∂–∏–º)
            if not DEV_MODE and api_key:
                try:
                    await api_client.log_usage(api_key, endpoint)
                    logger.debug(
                        f"Usage logged for endpoint '{endpoint}' by user {user_id}"
                    )
                except Exception as e:
                    logger.error(
                        f"Failed to log usage for endpoint '{endpoint}': {type(e).__name__}"
                    )

            return result

        return wrapper

    return decorator


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = await get_api_key(user_id)

    if not api_key:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π API –∫–ª—é—á —á–µ—Ä–µ–∑ Billing Service
        if not DEV_MODE:
            try:
                new_api_key = await api_client.create_billing_key(
                    tg_id=user_id,
                    email=None,  # email –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                )
                if new_api_key:
                    await save_api_key(user_id, new_api_key)
                    api_key = new_api_key
                    logger.info(f"Successfully created new API key for user {user_id}")
            except Exception as e:
                logger.error(
                    f"Failed to create API key for user {user_id}: {type(e).__name__}"
                )

        if not api_key:
            await message.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.full_name)}!\n\n"
                "üîë –î–ª—è —Ä–∞–±–æ—Ç—ã —Å ZakupAI –Ω—É–∂–µ–Ω API –∫–ª—é—á.\n"
                f"–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É: {hcode('/key YOUR_API_KEY')}\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
                f"‚Ä¢ {hcode('/search')} &lt;–∑–∞–ø—Ä–æ—Å&gt; - –ø–æ–∏—Å–∫ –ª–æ—Ç–æ–≤\n"
                f"‚Ä¢ {hcode('/lot <id|url>')} - –∞–Ω–∞–ª–∏–∑ –ª–æ—Ç–∞\n"
                f"‚Ä¢ {hcode('/help')} - —Å–ø—Ä–∞–≤–∫–∞"
            )
        else:
            await message.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.full_name)}!\n\n"
                "‚úÖ API –∫–ª—é—á —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n"
                "üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                f"‚Ä¢ {hcode('/search')} &lt;–∑–∞–ø—Ä–æ—Å&gt; - –ø–æ–∏—Å–∫ –ª–æ—Ç–æ–≤\n"
                f"‚Ä¢ {hcode('/lot <id|url>')} - –∞–Ω–∞–ª–∏–∑ –ª–æ—Ç–∞\n"
                f"‚Ä¢ {hcode('/help')} - —Å–ø—Ä–∞–≤–∫–∞"
            )
    else:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á
        if not DEV_MODE and not await api_client.validate_key(api_key, "start"):
            await message.answer(
                f"‚ö†Ô∏è –í–∞—à API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç.\n\n"
                f"–û–±–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á: {hcode('/key YOUR_NEW_API_KEY')}"
            )
        else:
            await message.answer(
                f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {hbold(message.from_user.full_name)}!\n\n"
                "üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                f"‚Ä¢ {hcode('/search')} &lt;–∑–∞–ø—Ä–æ—Å&gt; - –ø–æ–∏—Å–∫ –ª–æ—Ç–æ–≤\n"
                f"‚Ä¢ {hcode('/lot <id|url>')} - –∞–Ω–∞–ª–∏–∑ –ª–æ—Ç–∞\n"
                f"‚Ä¢ {hcode('/key <–Ω–æ–≤—ã–π_–∫–ª—é—á>')} - –æ–±–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á\n"
                f"‚Ä¢ {hcode('/help')} - —Å–ø—Ä–∞–≤–∫–∞"
            )


@dp.message(Command("key"))
async def command_key_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /key –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–∞
    """
    user_id = message.from_user.id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º API –∫–ª—é—á –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π: {hcode('/key YOUR_API_KEY')}"
        )
        return

    api_key = args[1].strip()

    if len(api_key) < 10:  # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        await message.answer("‚ùå API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        return

    try:
        if DEV_MODE:
            await save_api_key(user_id, api_key)
            await message.answer("‚úÖ API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω (dev —Ä–µ–∂–∏–º)")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ Billing Service
            if await api_client.validate_key(api_key, "key"):
                await save_api_key(user_id, api_key)
                await message.answer("‚úÖ API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω!")
                # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã key
                await api_client.log_usage(api_key, "key")
            else:
                await message.answer(
                    "‚ùå API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

    except Exception as e:
        logger.error(f"Failed to save API key for user {user_id}: {type(e).__name__}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–∞")


@dp.message(Command("search"))
@validate_and_log_bot(require_key=True)
async def command_search_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    """
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"

    logger.info(f"Processing search command for user {user_id} (@{username})")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search &lt;–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞&gt;\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            f"‚Ä¢ {hcode('/search –õ–ê–ö')}\n"
            f"‚Ä¢ {hcode('/search –∫–æ–º–ø—å—é—Ç–µ—Ä—ã')}\n"
            f"‚Ä¢ {hcode('/search —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –¥–æ—Ä–æ–≥')}\n"
            f"‚Ä¢ {hcode('/search –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ')}"
        )
        return

    raw_query = args[1].strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
    if len(raw_query) < 2:
        await message.answer("‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)")
        return

    if len(raw_query) > 200:
        await message.answer(
            "‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)"
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∏—Å–∫–∞
    loading_message = await message.answer(
        "üîç –ò—â—É –ª–æ—Ç—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
    )

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ n8n fallback
        from services_v2 import search_lots_for_telegram_v2

        results_text = await search_lots_for_telegram_v2(
            raw_query, limit=10, show_source=True, user_id=user_id
        )

        # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await loading_message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await message.answer(
            results_text, parse_mode="HTML", disable_web_page_preview=True
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        user_search_sessions[user_id] = {
            "query": raw_query,
            "offset": 10,  # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 10-–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            "limit": 10,
            "timestamp": message.date.timestamp(),
        }

        logger.info(
            f"Search completed for user {user_id} (@{username}) with query '{raw_query}'"
        )

    except Exception as e:
        await loading_message.delete()
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {type(e).__name__}")
        logger.error(
            f"Error searching for '{raw_query}' by user {user_id}: {type(e).__name__}"
        )


@dp.message(Command("search_continue"))
@validate_and_log_bot(require_key=True)
async def command_search_continue_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search_continue –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –ª–æ—Ç–æ–≤
    """
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"

    logger.info(f"Processing search_continue command for user {user_id} (@{username})")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_search_sessions:
        await message.answer(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /search"
        )
        return

    search_session = user_search_sessions[user_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –ø–æ–∏—Å–∫ (15 –º–∏–Ω—É—Ç)
    import time

    if time.time() - search_session["timestamp"] > 900:  # 15 –º–∏–Ω—É—Ç
        del user_search_sessions[user_id]
        await message.answer(
            "‚è∞ –°–µ—Å—Å–∏—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.\n\n"
            "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /search"
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∏—Å–∫–∞
    loading_message = await message.answer("üîç –ó–∞–≥—Ä—É–∂–∞—é —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        query = search_session["query"]
        offset = search_session["offset"]
        limit = search_session["limit"]

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º
        from services_v2 import search_lots_for_telegram_v2

        results_text = await search_lots_for_telegram_v2(
            query, limit=limit, offset=offset, show_source=True, user_id=user_id
        )

        # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await loading_message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await message.answer(
            results_text, parse_mode="HTML", disable_web_page_preview=True
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        search_session["offset"] += limit
        search_session["timestamp"] = message.date.timestamp()

        logger.info(
            f"Search continue completed for user {user_id} (@{username}) with query '{query}', offset {offset}"
        )

    except Exception as e:
        await loading_message.delete()
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞: {type(e).__name__}")
        logger.error(f"Search continue failed for user {user_id}: {e}")


@dp.message(Command("lot"))
@validate_and_log_bot(require_key=True)
async def command_lot_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /lot –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ç–∞
    """
    user_id = message.from_user.id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ª–æ—Ç–∞
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            f"‚ùå –£–∫–∞–∂–∏ ID –∏–ª–∏ URL –ª–æ—Ç–∞.\n–ü—Ä–∏–º–µ—Ä: {hcode('/lot 12345')}"
        )
        return

    lot_input = args[1].strip()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ URL –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    lot_id = extract_lot_id(lot_input)
    if not lot_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ª–æ—Ç–∞")
        return

    if DEV_MODE:
        await message.answer("üîÑ Dev —Ä–µ–∂–∏–º: —ç–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ç–∞...")
        # –≠–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ dev —Ä–µ–∂–∏–º–µ
        dev_result = {
            "lot_id": lot_id,
            "tldr": {
                "title": f"–¢–µ—Å—Ç–æ–≤—ã–π –ª–æ—Ç {lot_id}",
                "price": "1000000",
                "customer": "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑—á–∏–∫",
            },
            "risk": {"score": 0.3, "explanation": "–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (dev)"},
            "finance": {
                "amount_without_vat": "892857",
                "vat_amount": "107143",
                "total_with_vat": "1000000",
            },
        }
        formatted_result = format_lot_analysis(dev_result)
        await message.answer(formatted_result)
    else:
        await message.answer("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ª–æ—Ç...")

        try:
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á (—É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º)
            api_key = await get_api_key(user_id)

            # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º API –∫–ª—é—á–æ–º
            user_client = ZakupaiAPIClient(
                base_url=config.api.zakupai_base_url,
                api_key=api_key,
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–æ—Ç–∞
            result = await analyze_lot_pipeline(user_client, lot_id)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            formatted_result = format_lot_analysis(result)
            await message.answer(formatted_result)

        except Exception as e:
            logger.error(
                f"Failed to analyze lot {lot_id} for user {user_id}: {type(e).__name__}"
            )
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ç–∞")


@dp.message(Command("help"))
@validate_and_log_bot(require_key=False)
async def command_help_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    help_text = (
        "ü§ñ ZakupAI Telegram Bot\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ {hcode('/start')} - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        f"‚Ä¢ {hcode('/key <api_key>')} - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á\n"
        f"‚Ä¢ {hcode('/search')} &lt;–∑–∞–ø—Ä–æ—Å&gt; - –ø–æ–∏—Å–∫ –ª–æ—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n"
        f"‚Ä¢ {hcode('/lot <id|url>')} - –∞–Ω–∞–ª–∏–∑ –ª–æ—Ç–∞\n"
        f"‚Ä¢ {hcode('/help')} - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üîç –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞:\n"
        f"{hcode('/search –∫–æ–º–ø—å—é—Ç–µ—Ä—ã')}\n"
        f"{hcode('/search —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –¥–æ—Ä–æ–≥')}\n\n"
        "üìä –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ç–∞:\n"
        f"{hcode('/lot 12345')}\n"
        f"{hcode('/lot https://goszakup.gov.kz/ru/announce/index/12345')}\n\n"
        "üí∞ –¢–∞—Ä–∏—Ñ—ã:\n"
        "‚Ä¢ Free: 100 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å, 20/—á–∞—Å\n"
        "‚Ä¢ Premium: 5000 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å, 500/—á–∞—Å\n\n"
        "‚ö° –õ–∏–º–∏—Ç—ã:\n"
        "‚Ä¢ –ü–æ–∏—Å–∫: 1 –∑–∞–ø—Ä–æ—Å –≤ —Å–µ–∫—É–Ω–¥—É\n"
        "‚Ä¢ –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É\n\n"
        "üîß –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @zakupai_support"
    )
    await message.answer(help_text)


def extract_lot_id(lot_input: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –ª–æ—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ (ID –∏–ª–∏ URL)
    """
    import re

    # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —á–∏—Å–ª–æ
    if lot_input.isdigit():
        return lot_input

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ URL
    url_patterns = [
        r"/announce/index/(\d+)",
        r"/lot/(\d+)",
        r"lot_id=(\d+)",
        r"id=(\d+)",
    ]

    for pattern in url_patterns:
        match = re.search(pattern, lot_input)
        if match:
            return match.group(1)

    return ""


async def analyze_lot_pipeline(client: ZakupaiAPIClient, lot_id: str) -> dict:
    """
    –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ç–∞
    """
    result = {
        "lot_id": lot_id,
        "tldr": None,
        "risk": None,
        "finance": None,
        "error": None,
    }

    try:
        # 1. TL;DR —á–µ—Ä–µ–∑ doc-service
        tldr_data = await client.get_tldr(lot_id)
        result["tldr"] = tldr_data

        # 2. –†–∏—Å–∫-–∞–Ω–∞–ª–∏–∑
        risk_data = await client.get_risk_score(lot_id)
        result["risk"] = risk_data

        # 3. –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–∞—Å—á—ë—Ç—ã (–ø—Ä–∏–º–µ—Ä —Å –ù–î–°)
        if tldr_data and "price" in tldr_data:
            vat_data = await client.calculate_vat(tldr_data["price"])
            result["finance"] = vat_data

    except Exception as e:
        result["error"] = str(e)

    return result


def format_lot_analysis(result: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    lot_id = result["lot_id"]

    if result.get("error"):
        return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ç–∞ {lot_id}: {result['error']}"

    output = [f"üìä –ê–Ω–∞–ª–∏–∑ –ª–æ—Ç–∞ {hbold(lot_id)}"]

    # TL;DR
    if result.get("tldr"):
        tldr = result["tldr"]
        output.append(f"\nüìù {hbold('–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:')}")
        output.append(f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {tldr.get('title', 'N/A')}")
        output.append(f"‚Ä¢ –¶–µ–Ω–∞: {tldr.get('price', 'N/A')} —Ç–≥")
        output.append(f"‚Ä¢ –ó–∞–∫–∞–∑—á–∏–∫: {tldr.get('customer', 'N/A')}")

    # –†–∏—Å–∫-–∞–Ω–∞–ª–∏–∑
    if result.get("risk"):
        risk = result["risk"]
        risk_score = risk.get("score", 0)
        risk_level = (
            "üü¢ –ù–∏–∑–∫–∏–π"
            if risk_score < 0.3
            else "üü° –°—Ä–µ–¥–Ω–∏–π" if risk_score < 0.7 else "üî¥ –í—ã—Å–æ–∫–∏–π"
        )

        output.append(f"\n‚ö†Ô∏è {hbold('–†–∏—Å–∫-–∞–Ω–∞–ª–∏–∑:')}")
        output.append(f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level} ({risk_score:.2f})")
        if "explanation" in risk:
            output.append(f"‚Ä¢ –ü—Ä–∏—á–∏–Ω—ã: {risk['explanation']}")

    # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–∞—Å—á—ë—Ç—ã
    if result.get("finance"):
        finance = result["finance"]
        output.append(f"\nüí∞ {hbold('–§–∏–Ω–∞–Ω—Å—ã:')}")
        output.append(f"‚Ä¢ –°—É–º–º–∞ –±–µ–∑ –ù–î–°: {finance.get('amount_without_vat', 'N/A')} —Ç–≥")
        output.append(f"‚Ä¢ –ù–î–° (12%): {finance.get('vat_amount', 'N/A')} —Ç–≥")
        output.append(f"‚Ä¢ –ò—Ç–æ–≥–æ —Å –ù–î–°: {finance.get('total_with_vat', 'N/A')} —Ç–≥")

    return "\n".join(output)


async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è production —Ä–µ–∂–∏–º–∞"""
    if not USE_WEBHOOK:
        return

    webhook_url = config.telegram.webhook_url
    webhook_secret = config.telegram.webhook_secret

    logger.info(f"Setting webhook to: {webhook_url}")

    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook
    await bot.delete_webhook(drop_pending_updates=True)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
    await bot.set_webhook(
        url=webhook_url, secret_token=webhook_secret, drop_pending_updates=True
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
    webhook_info = await bot.get_webhook_info()
    logger.info(f"Webhook info: {webhook_info}")


@asynccontextmanager
async def lifespan_context():
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_db()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if USE_WEBHOOK:
        await setup_webhook()

    yield

    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    if USE_WEBHOOK:
        await bot.delete_webhook(drop_pending_updates=False)

    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")


async def webhook_main() -> None:
    """
    –ó–∞–ø—É—Å–∫ –≤ webhook —Ä–µ–∂–∏–º–µ
    """
    async with lifespan_context():
        app = web.Application()

        webhook_requests_handler = SimpleRequestHandler(
            dispatcher=dp,
            bot=bot,
            secret_token=config.telegram.webhook_secret,
        )
        webhook_requests_handler.register(app, path="/webhook/telegram")

        # Health check endpoint
        async def health_check(request):
            return web.Response(text="OK", status=200)

        app.router.add_get("/health", health_check)

        # Setup application and start server
        setup_application(app, dp, bot=bot)

        logger.info("üöÄ ZakupAI Telegram Bot –∑–∞–ø—É—â–µ–Ω –≤ webhook —Ä–µ–∂–∏–º–µ")

        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, host="0.0.0.0", port=8000)  # nosec B104
        await site.start()

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        try:
            await asyncio.Future()  # run forever
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        finally:
            await runner.cleanup()


async def polling_main() -> None:
    """
    –ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ
    """
    async with lifespan_context():
        logger.info("üöÄ ZakupAI Telegram Bot –∑–∞–ø—É—â–µ–Ω –≤ polling —Ä–µ–∂–∏–º–µ")
        await dp.start_polling(bot)


async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    if USE_WEBHOOK:
        logger.info(f"–†–µ–∂–∏–º: Webhook ({config.telegram.webhook_url})")
        await webhook_main()
    else:
        logger.info("–†–µ–∂–∏–º: Polling (development)")
        await polling_main()


if __name__ == "__main__":
    asyncio.run(main())
