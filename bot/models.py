from datetime import datetime
from enum import Enum
from typing import Any

from pydantic import BaseModel, Field, validator


class RiskLevel(str, Enum):
    """–£—Ä–æ–≤–Ω–∏ —Ä–∏—Å–∫–∞"""

    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"


class ServiceStatus(str, Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Å–µ—Ä–≤–∏—Å–æ–≤"""

    OK = "ok"
    ERROR = "error"
    TIMEOUT = "timeout"


# === API Response Models ===


class HealthResponse(BaseModel):
    """–û—Ç–≤–µ—Ç health check"""

    status: str
    timestamp: datetime | None = None
    service: str | None = None


class InfoResponse(BaseModel):
    """–û—Ç–≤–µ—Ç info endpoint"""

    service: str
    version: str
    environment: str
    uptime: str | None = None


# === Doc Service Models ===


class TLDRRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å TL;DR"""

    lot_id: str = Field(..., description="ID –ª–æ—Ç–∞")


class TLDRResponse(BaseModel):
    """–û—Ç–≤–µ—Ç TL;DR"""

    lot_id: str
    title: str | None = None
    description: str | None = None
    price: float | None = None
    currency: str = "KZT"
    customer: str | None = None
    customer_bin: str | None = None
    deadline: str | None = None
    summary: str | None = None


class LetterGenerateRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞"""

    template: str = Field(..., description="–¢–∏–ø —à–∞–±–ª–æ–Ω–∞")
    context: dict[str, Any] = Field(..., description="–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞")


class LetterGenerateResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞"""

    content: str
    template_used: str
    generated_at: datetime


class RenderRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞"""

    content: str = Field(..., description="–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞")
    html_content: str | None = None  # –î–ª—è PDF —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞


class RenderResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞"""

    rendered_content: str | None = None
    rendered_html: str | None = None
    file_path: str | None = None
    file_size: int | None = None


# === Risk Engine Models ===


class RiskScoreRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å —Ä–∏—Å–∫-—Å–∫–æ—Ä–∞"""

    lot_id: str = Field(..., description="ID –ª–æ—Ç–∞")


class RiskScoreResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Ä–∏—Å–∫-—Å–∫–æ—Ä–∞"""

    lot_id: str
    score: float = Field(..., ge=0.0, le=1.0, description="–†–∏—Å–∫-—Å–∫–æ—Ä –æ—Ç 0 –¥–æ 1")
    level: RiskLevel
    explanation: str | None = None
    factors: list[str] | None = None
    confidence: float | None = Field(None, ge=0.0, le=1.0)
    evaluated_at: datetime


class RiskExplanationResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤"""

    lot_id: str
    detailed_explanation: str
    risk_factors: list[dict[str, Any]]
    recommendations: list[str] | None = None


# === Calc Service Models ===


class VATRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å —Ä–∞—Å—á—ë—Ç–∞ –ù–î–°"""

    amount: float = Field(..., gt=0, description="–°—É–º–º–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ù–î–°")
    vat_rate: float = Field(0.12, ge=0.0, le=1.0, description="–°—Ç–∞–≤–∫–∞ –ù–î–°")


class VATResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Ä–∞—Å—á—ë—Ç–∞ –ù–î–°"""

    amount: float
    vat_rate: float
    vat_amount: float
    amount_without_vat: float
    total_with_vat: float


class MarginRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å —Ä–∞—Å—á—ë—Ç–∞ –º–∞—Ä–∂–∏"""

    cost_price: float = Field(..., gt=0, description="–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å")
    selling_price: float = Field(..., gt=0, description="–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏")
    quantity: int = Field(1, gt=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")


class MarginResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Ä–∞—Å—á—ë—Ç–∞ –º–∞—Ä–∂–∏"""

    cost_price: float
    selling_price: float
    quantity: int
    total_cost: float
    total_revenue: float
    margin_amount: float
    margin_percentage: float
    roi_percentage: float


class PenaltyRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å —Ä–∞—Å—á—ë—Ç–∞ –ø–µ–Ω–∏"""

    contract_amount: float = Field(..., gt=0, description="–°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
    days_overdue: int = Field(..., gt=0, description="–î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏")
    penalty_rate: float = Field(0.1, ge=0.0, le=1.0, description="–°—Ç–∞–≤–∫–∞ –ø–µ–Ω–∏ –≤ –¥–µ–Ω—å")


class PenaltyResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Ä–∞—Å—á—ë—Ç–∞ –ø–µ–Ω–∏"""

    contract_amount: float
    days_overdue: int
    penalty_rate: float
    penalty_amount: float
    total_amount: float


# === Embedding API Models ===


class EmbedRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞"""

    text: str = Field(..., min_length=1, description="–¢–µ–∫—Å—Ç –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞")
    model: str = Field("all-MiniLM-L6-v2", description="–ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞")


class EmbedResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∞"""

    embedding: list[float]
    model: str
    dimension: int
    text_length: int


class IndexRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""

    doc_id: str = Field(..., description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    content: str = Field(..., min_length=1, description="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    metadata: dict[str, Any] | None = None


class IndexResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏"""

    doc_id: str
    indexed: bool
    embedding_dimension: int
    content_length: int


class SearchRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞"""

    query: str = Field(..., min_length=1, description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    limit: int = Field(10, gt=0, le=100, description="–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    threshold: float = Field(0.7, ge=0.0, le=1.0, description="–ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏")


class SearchResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞"""

    doc_id: str
    content: str
    score: float
    metadata: dict[str, Any] | None = None


class SearchResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –ø–æ–∏—Å–∫–∞"""

    query: str
    results: list[SearchResult]
    total_found: int
    search_time: float


# === Database Models ===


class TelegramUser(BaseModel):
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""

    user_id: int = Field(..., description="Telegram user ID")
    api_key: str = Field(..., min_length=10, description="API –∫–ª—é—á ZakupAI")
    created_at: datetime
    updated_at: datetime
    is_active: bool = True


class UserStats(BaseModel):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user_id: int
    registered_at: datetime
    last_updated: datetime
    is_active: bool
    requests_count: int | None = 0
    last_request_at: datetime | None = None


# === Analysis Models ===


class LotAnalysisResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ—Ç–∞"""

    lot_id: str
    tldr: TLDRResponse | None = None
    risk: RiskScoreResponse | None = None
    finance: VATResponse | None = None
    documents: list[SearchResult] | None = None
    errors: list[str] = []
    analysis_time: float | None = None
    analyzed_at: datetime


class PipelineStatus(BaseModel):
    """–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞"""

    lot_id: str
    stage: str  # tldr, risk, finance, documents
    status: ServiceStatus
    progress: float = Field(0.0, ge=0.0, le=1.0)
    message: str | None = None
    started_at: datetime
    completed_at: datetime | None = None


# === Bot Models ===


class BotCommand(BaseModel):
    """–ö–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞"""

    command: str
    user_id: int
    chat_id: int
    message_text: str
    timestamp: datetime


class BotResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –±–æ—Ç–∞"""

    text: str
    parse_mode: str | None = "HTML"
    reply_markup: dict[str, Any] | None = None


class ErrorResponse(BaseModel):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ"""

    error: str
    code: str | None = None
    details: dict[str, Any] | None = None
    timestamp: datetime


# === Validation and Utility Functions ===


def validate_lot_id(lot_id: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è ID –ª–æ—Ç–∞"""
    return lot_id.isdigit() and len(lot_id) > 0


def extract_lot_id_from_url(url: str) -> str | None:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –ª–æ—Ç–∞ –∏–∑ URL"""
    import re

    patterns = [r"/announce/index/(\d+)", r"/lot/(\d+)", r"lot_id=(\d+)", r"id=(\d+)"]

    for pattern in patterns:
        match = re.search(pattern, url)
        if match:
            return match.group(1)

    return None


def format_currency(amount: float, currency: str = "KZT") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã"""
    if currency == "KZT":
        return f"{amount:,.0f} —Ç–≥"
    return f"{amount:,.2f} {currency}"


def get_risk_level_emoji(level: RiskLevel) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
    emoji_map = {RiskLevel.LOW: "üü¢", RiskLevel.MEDIUM: "üü°", RiskLevel.HIGH: "üî¥"}
    return emoji_map.get(level, "‚ö™")


def calculate_risk_level(score: float) -> RiskLevel:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ –ø–æ —Å–∫–æ—Ä—É"""
    if score < 0.3:
        return RiskLevel.LOW
    elif score < 0.7:
        return RiskLevel.MEDIUM
    else:
        return RiskLevel.HIGH


# === Model Validators ===


@validator("score", "confidence", allow_reuse=True)
def validate_score_range(cls, v):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–∫–æ—Ä–æ–≤"""
    if v is not None and not (0.0 <= v <= 1.0):
        raise ValueError("Score must be between 0.0 and 1.0")
    return v


@validator("amount", "cost_price", "selling_price", "contract_amount", allow_reuse=True)
def validate_positive_amount(cls, v):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—É–º–º"""
    if v <= 0:
        raise ValueError("Amount must be positive")
    return v


# –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –∫ –º–æ–¥–µ–ª—è–º
RiskScoreResponse.validate_score_range = validate_score_range
VATRequest.validate_positive_amount = validate_positive_amount
MarginRequest.validate_positive_amount = validate_positive_amount
PenaltyRequest.validate_positive_amount = validate_positive_amount
