"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –±–æ—Ç–∞ ZakupAI
"""

import logging
import traceback
from typing import Any

from aiogram import BaseMiddleware
from aiogram.types import TelegramObject
from config import config

logger = logging.getLogger(__name__)


class ErrorHandlingMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""

    async def __call__(
        self, handler, event: TelegramObject, data: dict[str, Any]
    ) -> Any:
        try:
            return await handler(event, data)
        except Exception as e:
            await self.handle_error(event, e)
            # –ù–µ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å
            return None

    async def handle_error(self, event: TelegramObject, error: Exception):
        """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        user_id = None
        username = "unknown"

        if hasattr(event, "from_user") and event.from_user:
            user_id = event.from_user.id
            username = event.from_user.username or "no_username"

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        error_type = type(error).__name__
        error_msg = str(error)[:200]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ

        logger.error(
            f"Unhandled error for user {user_id} (@{username}): {error_type}: {error_msg}"
        )

        # –í dev —Ä–µ–∂–∏–º–µ –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π traceback
        if config.security.environment == "development":
            logger.error(f"Full traceback: {traceback.format_exc()}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if hasattr(event, "answer"):
            try:
                await event.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
                    f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {error_type}"
                )
            except Exception as e:
                logger.error(
                    f"Failed to send error message to user: {type(e).__name__}"
                )


class SecurityException(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Ä—É—à–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    pass


class RateLimitException(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è rate limit"""

    pass


class ValidationException(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

    pass


def log_security_event(event_type: str, user_id: int, details: dict = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    details_str = ""
    if details:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
        safe_details = {}
        for key, value in details.items():
            if key.lower() in ["api_key", "password", "token", "secret"]:
                safe_details[key] = "[REDACTED]"
            elif isinstance(value, str) and len(value) > 100:
                safe_details[key] = value[:100] + "..."
            else:
                safe_details[key] = value
        details_str = f" - {safe_details}"

    logger.warning(f"SECURITY_EVENT: {event_type} by user {user_id}{details_str}")


def handle_api_error(error: Exception, context: str = "") -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    error_type = type(error).__name__

    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logger.error(f"API error in {context}: {error_type}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
    if "timeout" in str(error).lower() or "TimeoutError" in error_type:
        return "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    elif "connection" in str(error).lower() or "ConnectionError" in error_type:
        return "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."
    elif "unauthorized" in str(error).lower() or error_type == "Unauthorized":
        return "üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
    elif "rate limit" in str(error).lower():
        return "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ."
    else:
        return f"‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ö–æ–¥: {error_type}"


async def validate_user_input(
    text: str, max_length: int = 1000, required: bool = True
) -> str | None:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""

    if not text:
        if required:
            raise ValidationException("–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞")
        return None

    if not isinstance(text, str):
        raise ValidationException("–í–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º")

    if len(text) > max_length:
        raise ValidationException(
            f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º {max_length} —Å–∏–º–≤–æ–ª–æ–≤)"
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    dangerous_chars = ["<script", "javascript:", "data:", "vbscript:"]
    text_lower = text.lower()

    for char in dangerous_chars:
        if char in text_lower:
            log_security_event("SUSPICIOUS_INPUT", 0, {"input": text[:50]})
            raise SecurityException("–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥")

    return text.strip()


async def check_user_permissions(user_id: int, action: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–∞—Å—à–∏—Ä—è–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""

    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if user_id <= 0:
        log_security_event("INVALID_USER_ID", user_id, {"action": action})
        return False

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:
    # - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
    # - —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

    return True
