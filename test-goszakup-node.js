#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ goszakup –Ω–æ–¥—ã
 */

// –≠–º—É–ª—è—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ n8n
const mockContext = {
    getInputData: () => [{ json: {} }],
    getNodeParameter: (name, index) => {
        const params = {
            resource: 'lots',
            operation: 'getAll',
            limit: 5
        };
        return params[name];
    },
    getCredentials: async () => ({
        token: process.env.GOSZAKUP_TOKEN || 'test-token',
        baseUrl: process.env.GOSZAKUP_BASE || 'https://ows.goszakup.gov.kz'
    }),
    helpers: {
        request: async (options) => {
            console.log(`üîç Making request to: ${options.uri}`);
            console.log(`üìã Headers:`, options.headers);
            console.log(`üìä Query params:`, options.qs || 'none');

            // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç API
            return {
                data: [
                    {
                        id: '12345',
                        title: '–¢–µ—Å—Ç–æ–≤—ã–π –ª–æ—Ç',
                        status: 'active',
                        price: 1000000,
                        deadline: '2024-12-31'
                    },
                    {
                        id: '67890',
                        title: '–î—Ä—É–≥–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ—Ç',
                        status: 'published',
                        price: 500000,
                        deadline: '2024-11-30'
                    }
                ]
            };
        }
    },
    continueOnFail: () => false,
    getNode: () => ({ name: 'Test Goszakup Node' })
};

async function testGoszakupNode() {
    console.log('üöÄ Testing Goszakup n8n Node');
    console.log('================================\n');

    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—à—É –Ω–æ–¥—É (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
        const GoszakupNodePath = './n8n-nodes/goszakup-rk/nodes/Goszakup/Goszakup.node.js';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        const fs = require('fs');
        if (!fs.existsSync(GoszakupNodePath)) {
            console.error('‚ùå –§–∞–π–ª –Ω–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω:', GoszakupNodePath);
            return;
        }

        const { Goszakup } = require(GoszakupNodePath);
        const node = new Goszakup();

        console.log('‚úÖ –ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        console.log(`üìã –ù–∞–∑–≤–∞–Ω–∏–µ: ${node.description.displayName}`);
        console.log(`üîß –í–µ—Ä—Å–∏—è: ${node.description.version}`);
        console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${node.description.description}\n`);

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –Ω–æ–¥–µ
        Object.setPrototypeOf(node, mockContext);
        Object.assign(node, mockContext);

        console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...\n');

        // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–¥—É
        const result = await node.execute();

        console.log('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
        console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result[0].length}`);
        console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:');

        result[0].forEach((item, index) => {
            console.log(`  ${index + 1}. ${item.json.title || item.json.id} (${item.json.status})`);
        });

        console.log('\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
        console.error('üîç Stack trace:', error.stack);
    }
}

async function testCredentials() {
    console.log('\nüîê Testing Credentials');
    console.log('=======================');

    try {
        const CredentialsPath = './n8n-nodes/goszakup-rk/credentials/GoszakupApi.credentials.js';

        if (!require('fs').existsSync(CredentialsPath)) {
            console.error('‚ùå –§–∞–π–ª credentials –Ω–µ –Ω–∞–π–¥–µ–Ω:', CredentialsPath);
            return;
        }

        const { GoszakupApi } = require(CredentialsPath);
        const credentials = new GoszakupApi();

        console.log('‚úÖ Credentials —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        console.log(`üìã –ù–∞–∑–≤–∞–Ω–∏–µ: ${credentials.displayName}`);
        console.log(`üîß –¢–∏–ø: ${credentials.name}`);
        console.log(`üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ${credentials.documentationUrl}`);
        console.log(`‚öôÔ∏è  –°–≤–æ–π—Å—Ç–≤: ${credentials.properties.length}`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ credentials:', error.message);
    }
}

async function main() {
    await testCredentials();
    await testGoszakupNode();

    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ n8n: http://localhost:5678');
    console.log('2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π workflow');
    console.log('3. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–¥—É "Goszakup"');
    console.log('4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ credentials —Å —Ä–µ–∞–ª—å–Ω—ã–º API —Ç–æ–∫–µ–Ω–æ–º');
    console.log('5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
}

if (require.main === module) {
    main().catch(console.error);
}
