#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Telegram Bot —Å Billing Service
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—é—Ç endpoint –≤ Billing
"""

import asyncio

from bot.client import ZakupaiAPIClient


async def test_billing_integration():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Billing Service
    """
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    client = ZakupaiAPIClient(
        base_url="http://localhost:8080", api_key="test-key-12345"
    )

    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Bot ‚Üî Billing Service\n")

    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ API –∫–ª—é—á–∞
    print("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ API –∫–ª—é—á–∞...")
    try:
        api_key = await client.create_billing_key(tg_id=12345, email="test@example.com")
        if api_key:
            print(f"   ‚úÖ –ö–ª—é—á —Å–æ–∑–¥–∞–Ω: {api_key[:12]}...")
        else:
            print("   ‚ùå –ö–ª—é—á –Ω–µ —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞: {e}")

    # –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö endpoints
    endpoints_to_test = ["start", "key", "lot", "help", "stats", "unknown"]
    print(f"\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è endpoints: {', '.join(endpoints_to_test)}")

    test_key = "test-api-key-123456789"

    for endpoint in endpoints_to_test:
        try:
            is_valid = await client.validate_key(test_key, endpoint)
            status = "‚úÖ valid" if is_valid else "‚ùå invalid"
            print(f"   endpoint='{endpoint}' ‚Üí {status}")
        except Exception as e:
            print(f"   endpoint='{endpoint}' ‚Üí ‚ùå error: {e}")

    # –¢–µ—Å—Ç 3: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...")
    for endpoint in ["start", "lot", "help"]:
        try:
            logged = await client.log_usage(test_key, endpoint, requests=1)
            status = "‚úÖ logged" if logged else "‚ùå not logged"
            print(f"   usage '{endpoint}' ‚Üí {status}")
        except Exception as e:
            print(f"   usage '{endpoint}' ‚Üí ‚ùå error: {e}")

    print("\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")


def test_command_endpoint_extraction():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∏–∑–≤–ª–µ—á–µ–Ω–∏—è endpoint –∏–∑ –∫–æ–º–∞–Ω–¥
    """
    from bot.main import get_command_endpoint

    test_cases = [
        ("/start", "start"),
        ("/key abc123", "key"),
        ("/lot 12345", "lot"),
        ("/help", "help"),
        ("/stats", "stats"),
        ("/unknown_command", "unknown_command"),
        ("–Ω–µ –∫–æ–º–∞–Ω–¥–∞", "unknown"),
    ]

    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è endpoint –∏–∑ –∫–æ–º–∞–Ω–¥:")

    for input_text, expected in test_cases:
        result = get_command_endpoint(input_text)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"   '{input_text}' ‚Üí '{result}' {status}")


if __name__ == "__main__":
    print("=" * 50)
    print("ü§ñ ZakupAI Bot - Billing Integration Test")
    print("=" * 50)

    # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è endpoint (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
    test_command_endpoint_extraction()

    # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Billing Service (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
    try:
        asyncio.run(test_billing_integration())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

    print("\n" + "=" * 50)
