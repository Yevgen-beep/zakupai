#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫ ZakupAI
"""

import asyncio
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º bot –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "bot"))

from analytics_service import analytics_service
from search.search_service import GoszakupSearchService
from user_metrics import metrics_service


async def test_metrics_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫"""

    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫")
    print("=" * 60)

    try:
        # –¢–µ—Å—Ç 1: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_users = [12345, 67890, 11111]
        test_queries = ["–ª–∞–∫", "–∫–æ–º–ø—å—é—Ç–µ—Ä—ã", "–º–µ–±–µ–ª—å", "—É–≥–æ–ª—å", "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ"]

        for i, user_id in enumerate(test_users):
            for j, query in enumerate(test_queries[:3]):  # –ü–æ 3 –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                metrics_service.log_search(
                    user_id=user_id,
                    query=query,
                    results_count=5 + i + j,
                    api_used="graphql_v2" if i % 2 == 0 else "rest_v3",
                    execution_time_ms=150 + i * 50 + j * 20,
                    success=True,
                )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω—É –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
        metrics_service.log_search(
            user_id=12345,
            query="—Ç–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞",
            results_count=0,
            api_used="graphql_v2",
            execution_time_ms=5000,
            success=False,
            error_message="API timeout",
        )

        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

        # –¢–µ—Å—Ç 2: –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
        popular_searches = metrics_service.get_popular_searches(days=7, limit=5)

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(popular_searches)} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")
        for i, search in enumerate(popular_searches, 1):
            print(f"   {i}. '{search.query}' - {search.count} —Ä–∞–∑")

        # –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user_analytics = metrics_service.get_user_analytics(12345, days=7)

        if user_analytics:
            print("üë§ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 12345:")
            print(f"   - –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {user_analytics.total_searches}")
            print(f"   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {user_analytics.unique_queries}")
            print(f"   - –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {user_analytics.avg_results_per_search}")
            print(f"   - –°–∞–º—ã–π —á–∞—Å—Ç—ã–π –∑–∞–ø—Ä–æ—Å: '{user_analytics.most_searched_query}'")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        # –¢–µ—Å—Ç 4: –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        system_stats = metrics_service.get_system_stats(days=7)

        print("üè¢ –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {system_stats.get('total_searches', 0)}")
        print(f"   - –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {system_stats.get('active_users', 0)}")
        print(f"   - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {system_stats.get('success_rate', 0):.1f}%")
        print(
            f"   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {system_stats.get('avg_execution_time_ms', 0):.0f}–º—Å"
        )

        api_usage = system_stats.get("api_usage", {})
        print(f"   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API: {api_usage}")

        # –¢–µ—Å—Ç 5: –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")

        # Dashboard summary
        dashboard = analytics_service.get_dashboard_summary(days=7)
        print("üìã Dashboard summary:")
        print(dashboard[:300] + "..." if len(dashboard) > 300 else dashboard)

        # Popular searches text
        popular_text = analytics_service.get_popular_searches_text(days=7, limit=3)
        print("\nüîç Popular searches:")
        print(popular_text[:200] + "..." if len(popular_text) > 200 else popular_text)

        # User stats text
        user_stats_text = analytics_service.get_user_stats_text(12345, days=7)
        print("\nüë§ User stats:")
        print(
            user_stats_text[:200] + "..."
            if len(user_stats_text) > 200
            else user_stats_text
        )

        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

        # –¢–µ—Å—Ç 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–∏—Å–∫–æ–≤—ã–º —Å–µ—Ä–≤–∏—Å–æ–º
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–æ–∏—Å–∫–æ–≤—ã–º —Å–µ—Ä–≤–∏—Å–æ–º...")

        search_service = GoszakupSearchService(enable_metrics=True)

        if search_service.enable_metrics and search_service.metrics_service:
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–∏—Å–∫–æ–≤—ã–º —Å–µ—Ä–≤–∏—Å–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–∏—Å–∫–æ–≤—ã–º —Å–µ—Ä–≤–∏—Å–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

        # –¢–µ—Å—Ç 7: –°–∏—Å—Ç–µ–º–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
        print("\n7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤...")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_info = metrics_service.get_database_info()
        print(f"üíæ –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_info.get('db_size_mb', 0):.2f} MB")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {db_info.get('total_records', 0)}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –ª–æ–≥–æ–≤ (–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        print("\nüßπ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π...")
        cleanup_stats = metrics_service.cleanup_old_logs(days_to_keep=7)

        if cleanup_stats.get("deleted_count", 0) > 0:
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {cleanup_stats['deleted_count']} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        else:
            print("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–æ–≤—ã–µ)")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É –ø–æ —Ä–∞–∑–º–µ—Ä—É
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É –ø–æ —Ä–∞–∑–º–µ—Ä—É (–ª–∏–º–∏—Ç 0.01 MB –¥–ª—è —Ç–µ—Å—Ç–∞)...")
        auto_cleanup_result = metrics_service.auto_cleanup_by_size(max_size_mb=0.01)

        if auto_cleanup_result:
            print(
                f"‚úÖ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {auto_cleanup_result.get('deleted_count', 0)} –∑–∞–ø–∏—Å–µ–π —É–¥–∞–ª–µ–Ω–æ"
            )
        else:
            print("‚ÑπÔ∏è –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ
        final_db_info = metrics_service.get_database_info()
        print(
            f"\nüíæ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã: {final_db_info.get('db_size_mb', 0):.2f} MB"
        )
        print(
            f"üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {final_db_info.get('total_records', 0)}"
        )

        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫ —Å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–æ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("\nüìã –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤")
        print("   ‚úÖ –†–æ—Ç–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("   ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("   ‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

        print("\nü§ñ Telegram –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:")
        print("   /cleanup [–¥–Ω–∏] - –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π")
        print("   /dbinfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–µ –∏ –∑–∞–ø–∏—Å—è—Ö –±–∞–∑—ã")
        print("   /autocleanup [—Ä–∞–∑–º–µ—Ä_MB] - –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞")

        print("\nüìã –ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:")
        print("   1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ ID –≤ handlers_v2.py")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫")
        print("   3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /analytics, /popular, /mystats")
        print("   4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å cron –∑–∞–¥–∞—á—É –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏")
        print("   5. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_metrics_system())
