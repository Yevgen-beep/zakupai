#!/bin/bash

# Bash-—Å–∫—Ä–∏–ø—Ç –¥–ª—è E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Web UI —á–µ—Ä–µ–∑ curl –∏ jq
# Smoke-—Ç–µ—Å—Ç—ã –∫–ª—é—á–µ–≤—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Å –≤—ã–≤–æ–¥–æ–º ‚úÖ/‚ùå

set -e

WEB_UI_BASE_URL="http://localhost:8082"
TEST_FILE="web/test_fixtures/scan1.pdf"
TEMP_DIR="/tmp/webui_e2e_test"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
    exit 1
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

log_info() {
    echo -e "‚ÑπÔ∏è $1"
}

# –°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
mkdir -p "$TEMP_DIR"
trap "rm -rf $TEMP_DIR" EXIT

log_info "üöÄ –ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤ Web UI..."

# 1. –¢–µ—Å—Ç /health —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
log_info "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /health —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞..."
response=$(curl -s -w "%{http_code}" "$WEB_UI_BASE_URL/health" -o "$TEMP_DIR/health_response.json")
http_code="${response: -3}"

if [ "$http_code" != "200" ]; then
    log_error "–≠–Ω–¥–ø–æ–∏–Ω—Ç /health –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $http_code)"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É
status=$(jq -r '.status // empty' "$TEMP_DIR/health_response.json")
if [ "$status" != "ok" ]; then
    log_error "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ /health: $status"
fi

log_success "–≠–Ω–¥–ø–æ–∏–Ω—Ç /health —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"

# 2. –¢–µ—Å—Ç /lots —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
log_info "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /lots —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞..."
response=$(curl -s -w "%{http_code}" "$WEB_UI_BASE_URL/lots?keyword=–ª–∞–∫&limit=2" -o "$TEMP_DIR/lots_response.json")
http_code="${response: -3}"

if [ "$http_code" != "200" ]; then
    log_error "–≠–Ω–¥–ø–æ–∏–Ω—Ç /lots –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $http_code)"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ lots –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
lots_count=$(jq '.lots | length' "$TEMP_DIR/lots_response.json" 2>/dev/null || echo "0")
if [ "$lots_count" -le 0 ]; then
    log_error "–≠–Ω–¥–ø–æ–∏–Ω—Ç /lots –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤"
fi

log_success "–≠–Ω–¥–ø–æ–∏–Ω—Ç /lots —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–π–¥–µ–Ω–æ $lots_count –ª–æ—Ç–æ–≤)"

# 3. –¢–µ—Å—Ç /etl/upload —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
log_info "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /etl/upload —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞..."

if [ ! -f "$TEST_FILE" ]; then
    log_error "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª $TEST_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

response=$(curl -s -w "%{http_code}" \
    -X POST \
    -F "file=@$TEST_FILE" \
    "$WEB_UI_BASE_URL/etl/upload" \
    -o "$TEMP_DIR/upload_response.json")
http_code="${response: -3}"

if [ "$http_code" != "200" ]; then
    log_error "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ failed (HTTP $http_code)"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ content_preview
content_preview=$(jq -r '.content_preview // empty' "$TEMP_DIR/upload_response.json")
if [ -z "$content_preview" ]; then
    log_error "–í –æ—Ç–≤–µ—Ç–µ ETL upload –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç content_preview"
fi

content_length=${#content_preview}
if [ "$content_length" -le 0 ]; then
    log_error "content_preview –ø—É—Å—Ç"
fi

log_success "–≠–Ω–¥–ø–æ–∏–Ω—Ç /etl/upload —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (preview: $content_length —Å–∏–º–≤–æ–ª–æ–≤)"

# 4. –¢–µ—Å—Ç /search/documents —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
log_info "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /search/documents —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞..."

# –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
sleep 3

response=$(curl -s -w "%{http_code}" \
    -X POST \
    -H "Content-Type: application/json" \
    -d '{"query": "–∏—Å–∫"}' \
    "$WEB_UI_BASE_URL/search/documents" \
    -o "$TEMP_DIR/search_response.json")
http_code="${response: -3}"

if [ "$http_code" != "200" ]; then
    log_error "–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ failed (HTTP $http_code)"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ documents
documents_count=$(jq '.documents | length' "$TEMP_DIR/search_response.json" 2>/dev/null || echo "0")
if [ "$documents_count" -lt 1 ]; then
    log_error "–ü–æ–∏—Å–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
fi

log_success "–≠–Ω–¥–ø–æ–∏–Ω—Ç /search/documents —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–π–¥–µ–Ω–æ $documents_count –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)"

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
log_info "üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏..."

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
response=$(curl -s -w "%{http_code}" \
    -X POST \
    -H "Content-Type: application/json" \
    -d '{"query": "—Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"}' \
    "$WEB_UI_BASE_URL/search/documents" \
    -o "$TEMP_DIR/final_search_response.json")
http_code="${response: -3}"

if [ "$http_code" == "200" ]; then
    final_documents_count=$(jq '.documents | length' "$TEMP_DIR/final_search_response.json" 2>/dev/null || echo "0")
    if [ "$final_documents_count" -ge 1 ]; then
        log_success "–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω Web UI ‚Üí ETL ‚Üí ChromaDB —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        log_warning "–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"
    fi
else
    log_warning "–§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É (HTTP $http_code)"
fi

log_info "üéâ –í—Å–µ E2E —Ç–µ—Å—Ç—ã Web UI —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!"

# –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
echo
log_info "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
echo "   ‚úÖ /health - OK"
echo "   ‚úÖ /lots - OK ($lots_count –ª–æ—Ç–æ–≤)"
echo "   ‚úÖ /etl/upload - OK ($content_length —Å–∏–º–≤–æ–ª–æ–≤ preview)"
echo "   ‚úÖ /search/documents - OK ($documents_count –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)"
echo "   ‚úÖ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω - OK"
echo

log_success "–í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"

exit 0
