#!/bin/bash
# stage6-migrations.sh - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ Stage6
set -e

COMPOSE_CMD="docker compose -f docker-compose.yml -f docker-compose.override.stage6.yml --profile stage6"
SERVICES=("billing" "calc" "doc" "embedding" "etl" "risk")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ runner-–∞
runner_name_for() {
    local service=$1
    case "$service" in
        billing)    echo "migration-runner-billing-service" ;;
        calc)       echo "migration-runner-calc-service" ;;
        doc)        echo "migration-runner-doc-service" ;;
        embedding)  echo "migration-runner-embedding-api" ;;
        etl)        echo "migration-runner-etl-service" ;;
        risk)       echo "migration-runner-risk-engine" ;;
        *)          echo "migration-runner-${service}" ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –≤ —Å–µ—Ä–≤–∏—Å–µ
has_migrations() {
    local service=$1
    local service_dir="services/${service}-service"

    # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è embedding-api
    if [[ "$service" == "embedding" ]]; then
        service_dir="services/embedding-api"
    fi

    if [[ -f "${service_dir}/alembic/env.py" ]]; then
        return 0  # –µ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
    else
        return 1  # –Ω–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
    fi
}

echo "üöÄ Stage6 Migrations Automation Script"
echo "======================================"
echo

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ Alembic –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
run_alembic() {
    local service=$1
    local cmd=$2
    local runner_name=$(runner_name_for "$service")
    local service_upper="${service^^}"

    if ! has_migrations "$service"; then
        local service_dir="services/${service}-service"
        if [[ "$service" == "embedding" ]]; then
            service_dir="services/embedding-api"
        fi
        echo "‚è≠Ô∏è  ${service_upper} Service - SKIPPING (no alembic/ folder found)"
        echo "----------------------------------------"
        echo "   No alembic/ folder found in ${service_dir}/"
        echo
        return 0
    fi

    echo "üì¶ ${service_upper} Service - Using runner: ${runner_name}"
    echo "üì¶ ${service_upper} Service - Running: alembic ${cmd}"
    echo "----------------------------------------"

    # Smoke test: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    echo "üè• Database connectivity test..."
    $COMPOSE_CMD run --rm ${runner_name} sh -c "ping -c1 zakupai-db" || {
        echo "‚ùå Cannot reach zakupai-db from ${runner_name}"
        echo "   Check network configuration and DB service status"
        return 1
    }
    echo "‚úÖ zakupai-db is reachable"

    if [[ "$cmd" == *"--sql"* ]]; then
        echo "üîç DRY-RUN mode - SQL preview:"
        echo
    fi

    $COMPOSE_CMD run --rm ${runner_name} sh -c "alembic ${cmd}" || {
        echo "‚ùå Failed to run alembic ${cmd} for ${service}"
        return 1
    }

    echo
}

echo "üîç Phase 1: Checking current migration status"
echo "============================================="

for service in "${SERVICES[@]}"; do
    run_alembic "$service" "current"
done

echo "üß™ Phase 2: Dry-run migrations (SQL preview)"
echo "============================================"

for service in "${SERVICES[@]}"; do
    run_alembic "$service" "upgrade head --sql"
done

echo "‚ö†Ô∏è  IMPORTANT: Review the SQL above before proceeding!"
echo "======================================================"
read -p "Continue with actual migration execution? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå Migration execution cancelled by user"
    exit 0
fi

echo
echo "üöÄ Phase 3: Executing migrations"
echo "==============================="

for service in "${SERVICES[@]}"; do
    run_alembic "$service" "upgrade head"
done

echo "‚úÖ Phase 4: Verifying final migration status"
echo "==========================================="

for service in "${SERVICES[@]}"; do
    run_alembic "$service" "current"
done

echo
echo "üéâ All Stage6 migrations completed successfully!"
echo "==============================================="
echo "Summary:"
echo "- Checked initial status for ${#SERVICES[@]} services"
echo "- Performed dry-run SQL preview"
echo "- Executed migrations with user confirmation"
echo "- Verified final status"
echo
echo "üí° Next steps:"
echo "- Start Stage6 services: make stage6-up"
echo "- Run smoke tests: make stage6-smoke"
echo "- Check logs: make stage6-logs"
