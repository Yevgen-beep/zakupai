#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ –¥–ª—è ZakupAI
–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ cron –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
"""

import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º bot –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "bot"))

from user_metrics import metrics_service


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤"""

    print(f"üßπ ZakupAI Log Cleanup - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_info = metrics_service.get_database_info()

        print(f"üíæ –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã: {db_info.get('db_size_mb', 0):.2f} MB")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {db_info.get('total_records', 0):,}")
        print(
            f"üìÖ –ó–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: {db_info.get('recent_records_30d', 0):,}"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –æ—á–∏—Å—Ç–∫–∞
        size_mb = db_info.get("db_size_mb", 0)
        total_records = db_info.get("total_records", 0)

        cleanup_needed = False
        days_to_keep = 90  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ—á–∏—Å—Ç–∫–∏
        if size_mb > 100:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 100MB
            days_to_keep = 30
            cleanup_needed = True
            print("üî¥ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–µ–Ω—å –±–æ–ª—å—à–∞—è - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (30 –¥–Ω–µ–π)")
        elif size_mb > 50:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 50MB
            days_to_keep = 60
            cleanup_needed = True
            print("üü† –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–∞—è - —É–º–µ—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (60 –¥–Ω–µ–π)")
        elif total_records > 50000:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 50k –∑–∞–ø–∏—Å–µ–π
            days_to_keep = 90
            cleanup_needed = True
            print("üü° –ú–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (90 –¥–Ω–µ–π)")
        else:
            print("üü¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ—Ä–º–µ - –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

        if cleanup_needed:
            print(f"\nüßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ {days_to_keep} –¥–Ω–µ–π...")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
            cleanup_stats = metrics_service.cleanup_old_logs(days_to_keep=days_to_keep)

            deleted_count = cleanup_stats.get("deleted_count", 0)
            total_after = cleanup_stats.get("total_after", 0)

            if deleted_count > 0:
                print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                print(f"   - –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count:,}")
                print(f"   - –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π: {total_after:,}")

                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                final_db_info = metrics_service.get_database_info()
                final_size = final_db_info.get("db_size_mb", 0)
                size_saved = size_mb - final_size

                print(f"   - –†–∞–∑–º–µ—Ä –±–∞–∑—ã: {final_size:.2f} MB")
                print(f"   - –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {size_saved:.2f} MB")

                # –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
                log_message = f"{datetime.now().isoformat()}: Cleaned {deleted_count} records, saved {size_saved:.2f} MB"
                with open("data/cleanup.log", "a") as log_file:
                    log_file.write(log_message + "\n")

            else:
                print("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

        print(f"\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - {datetime.now().strftime('%H:%M:%S')}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É (–µ—Å–ª–∏ –≤—Å—ë –µ—â—ë –±–æ–ª—å—à–∞—è)
        final_size = (
            size_mb
            if not cleanup_needed
            else metrics_service.get_database_info().get("db_size_mb", 0)
        )

        if final_size > 150:  # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –±–æ–ª—å—à–µ 150MB
            print(
                f"\nü§ñ –ë–∞–∑–∞ –≤—Å—ë –µ—â—ë –±–æ–ª—å—à–∞—è ({final_size:.2f} MB) - –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫—É..."
            )
            auto_cleanup_result = metrics_service.auto_cleanup_by_size(max_size_mb=100)

            if auto_cleanup_result and auto_cleanup_result.get("deleted_count", 0) > 0:
                print(
                    f"‚úÖ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ {auto_cleanup_result['deleted_count']} –∑–∞–ø–∏—Å–µ–π"
                )

        return 0  # –£—Å–ø–µ—Ö

    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}"
        print(error_message)

        # –ó–∞–ø–∏—Å—å –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥
        try:
            os.makedirs("data", exist_ok=True)
            with open("data/cleanup.log", "a") as log_file:
                log_file.write(f"{datetime.now().isoformat()}: ERROR - {e}\n")
        except:
            pass

        return 1  # –û—à–∏–±–∫–∞


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
