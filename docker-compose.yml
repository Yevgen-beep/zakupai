services:
  db:
    image: postgres:16
    container_name: zakupai-db
    environment:
      POSTGRES_USER: zakupai
      POSTGRES_PASSWORD: zakupai
      POSTGRES_DB: zakupai
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zakupai"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - zakupai-network
    restart: unless-stopped

  embedding-api:
    build: ./services/embedding-api
    container_name: zakupai-embedding-api
    ports:
      - "7010:8000"
    env_file:
      - .env
    networks:
      - zakupai-network
      - ai-network
    restart: unless-stopped

  calc-service:
    build: ./services/calc-service
    container_name: zakupai-calc-service
    ports:
      - "7001:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - zakupai-network
    restart: unless-stopped

  risk-engine:
    build: ./services/risk-engine
    container_name: zakupai-risk-engine
    ports:
      - "7002:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      calc-service:
        condition: service_started
      embedding-api:
        condition: service_started
    networks:
      - zakupai-network
      - ai-network
    restart: unless-stopped

  doc-service:
    build: ./services/doc-service
    container_name: zakupai-doc-service
    ports:
      - "7003:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      embedding-api:
        condition: service_started
    networks:
      - zakupai-network
      - ai-network
    restart: unless-stopped

  gateway:
    image: nginx:alpine
    container_name: zakupai-gateway
    ports:
      - "8080:80"
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - calc-service
      - risk-engine
      - doc-service
      - embedding-api
    networks:
      - zakupai-network
    restart: unless-stopped

  ollama:
    image: ollama/ollama
    container_name: zakupai-ollama
    runtime: nvidia
    environment:
      NVIDIA_VISIBLE_DEVICES: all
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - ai-network
    restart: unless-stopped
    entrypoint: >
      sh -c "
        ollama pull nomic-embed-text &&
        echo 'Starting Ollama server...' &&
        ollama serve
      "

  chroma:
    image: chromadb/chroma
    container_name: zakupai-chroma
    ports:
      - "8000:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=*
      - CHROMA_SERVER_HOST=0.0.0.0
    networks:
      - ai-network
    restart: unless-stopped

  flowise:
    image: flowiseai/flowise
    container_name: zakupai-flowise
    ports:
      - "3000:3000"
    volumes:
      - flowise_data:/root/.flowise
      - ./flowise-tools:/opt/flowise_tools:ro
    environment:
      - FLOWISE_USERNAME=admin
      - FLOWISE_PASSWORD=admin123
      - DATABASE_PATH=/root/.flowise/flowise.sqlite
      - SECRETKEY_PATH=/root/.flowise
      - LOG_LEVEL=info
      - LOG_PATH=/root/.flowise/logs
      - BLOB_STORAGE_PATH=/root/.flowise/storage
    env_file:
      - .env
    networks:
      - ai-network
      - zakupai-network
    depends_on:
      - ollama
      - chroma
    restart: unless-stopped

  n8n:
    image: n8nio/n8n:1.105.4
    container_name: zakupai-n8n
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    environment:
      - GENERIC_TIMEZONE=Asia/Almaty
      - N8N_BASIC_AUTH_ACTIVE=false
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - N8N_EDITOR_BASE_URL=https://n8n.exomind.site
      - WEBHOOK_URL=https://n8n.exomind.site
      - N8N_ENCRYPTION_KEY=mySecretEncryptionKey123456
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=false
      - DB_SQLITE_POOL_SIZE=10
      - N8N_RUNNERS_ENABLED=true
      - N8N_SECURE_COOKIE=false
    env_file:
      - .env
    networks:
      - ai-network
      - zakupai-network
    restart: unless-stopped

  zakupai-bot:
    build: ./bot
    container_name: zakupai-bot
    env_file:
      - ./bot/.env
    environment:
      - GATEWAY_URL=http://zakupai-gateway
      - DATABASE_URL=postgresql+asyncpg://zakupai:zakupai@db:5432/zakupai
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=zakupai
      - POSTGRES_USER=zakupai
      - POSTGRES_PASSWORD=zakupai
    depends_on:
      db:
        condition: service_healthy
      gateway:
        condition: service_started
    networks:
      - zakupai-network
    restart: unless-stopped

  web:
    build: ./web
    container_name: zakupai-web
    ports:
      - "8081:8000"
    env_file:
      - .env
    environment:
      - GATEWAY_URL=http://gateway
      - ZAKUPAI_API_KEY=changeme
    depends_on:
      - gateway
    networks:
      - zakupai-network
    restart: unless-stopped

  db-backup:
    build: ./backup
    container_name: zakupai-db-backup
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=zakupai
      - POSTGRES_USER=zakupai
      - POSTGRES_PASSWORD=zakupai
      - BACKUP_RETENTION_DAYS=14
    volumes:
      - backup_data:/backups
    depends_on:
      db:
        condition: service_healthy
    networks:
      - zakupai-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: zakupai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - zakupai-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.0.0
    container_name: zakupai-grafana
    ports:
      - "3001:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_COOKIE_SECURE=false
      - GF_SECURITY_COOKIE_SAMESITE=lax
    networks:
      - zakupai-network
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: zakupai-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager:ro
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - zakupai-network
    restart: unless-stopped

  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: zakupai-blackbox
    ports:
      - "9115:9115"
    volumes:
      - ./monitoring/blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    networks:
      - zakupai-network
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: zakupai-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    networks:
      - zakupai-network
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: zakupai-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - zakupai-network
    restart: unless-stopped

volumes:
  postgres_data:
  ollama_data:
  chroma_data:
  flowise_data:
  n8n_data:
  backup_data:
  prometheus_data:
  grafana_data:

networks:
  zakupai-network:
    driver: bridge
  ai-network:
    driver: bridge
