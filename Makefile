# ============================================
# üß† ZakupAI Stage6 Build & Monitoring Control
# ============================================

SHELL := /bin/bash
COMPOSE_BASE = docker-compose.yml
COMPOSE_STAGE6 = docker-compose.override.stage6.monitoring.yml

.PHONY: help libs-build build-all clean stage6-up stage6-down stage6-status stage6-test stage6-rebuild test logs ps

# --------------------------------------------
# üîç –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
# --------------------------------------------

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
	@grep -E '^[a-zA-Z0-9_-]+:.*?## ' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@docker compose logs -f --tail=100

ps: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	@docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

# --------------------------------------------
# ‚öôÔ∏è –°–±–æ—Ä–∫–∞ –∏ –¥–µ–ø–ª–æ–π
# --------------------------------------------

libs-build: ## –°–æ–±—Ä–∞—Ç—å –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑ libs:latest
	@echo "üì¶ Building base libs image..."
	docker build -t libs:latest -f libs/Dockerfile libs

build-all: libs-build ## –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã (–±–µ–∑ –∫—ç—à–∞)
	@echo "üöß Building all ZakupAI services..."
	docker compose -f $(COMPOSE_BASE) build --no-cache

clean: ## –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	@echo "üßπ Stopping and pruning ZakupAI environment..."
	docker compose --profile stage6 down --remove-orphans
	docker system prune -af --volumes

stage6-up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å Stage6 —Å—Ç–µ–∫ (–≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã + –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)
	@echo "üöÄ Starting Stage6 stack..."
	docker compose --profile stage6 -f $(COMPOSE_BASE) -f $(COMPOSE_STAGE6) up -d

stage6-down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Stage6 —Å—Ç–µ–∫
	@echo "üõë Stopping Stage6 stack..."
	docker compose --profile stage6 -f $(COMPOSE_BASE) -f $(COMPOSE_STAGE6) down

stage6-rebuild: clean libs-build build-all stage6-up stage6-test ## –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –æ—á–∏—Å—Ç–∫–∞ ‚Üí libs ‚Üí —Å–±–æ—Ä–∫–∞ ‚Üí –∑–∞–ø—É—Å–∫ ‚Üí —Ç–µ—Å—Ç
	@echo "‚úÖ Stage6 rebuild complete. Monitoring stack verified."


# --------------------------------------------
# üß© –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ Loki
# --------------------------------------------

loki-restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ Loki –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
	@echo "‚ôªÔ∏è Restarting Loki service..."
	docker compose -f $(COMPOSE_BASE) -f $(COMPOSE_STAGE6) up -d loki
	@echo "‚è≥ Waiting for Loki to initialize..."
	@sleep 5
	@echo "\nüîç Checking Loki status..."
	@curl -s http://localhost:3100/loki/api/v1/status/buildinfo | jq || echo "‚ùå Loki still not responding"

# --------------------------------------------
# üß© –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# --------------------------------------------

test: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: make test SERVICE=calc-service
	@if [ -z "$(SERVICE)" ]; then \
		echo "Usage: make test SERVICE=<service-name>"; \
		echo "Example: make test SERVICE=calc-service"; \
		exit 1; \
	fi
	@echo "üîç Testing $(SERVICE)..."
	@PORT=$$(docker port $(SERVICE) 2>/dev/null | grep -oP '0.0.0.0:\K\d+' | head -1); \
	if [ -z "$$PORT" ]; then \
		echo "‚ùå Container $(SERVICE) not found or no exposed ports"; \
		exit 1; \
	fi; \
	echo "‚Üí Checking http://localhost:$$PORT/health"; \
	if curl -sf http://localhost:$$PORT/health > /dev/null; then \
		echo "‚úÖ $(SERVICE) is healthy and responding"; \
	else \
		echo "‚ùå $(SERVICE) is not responding on port $$PORT"; \
		exit 1; \
	fi

stage6-test: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Prometheus, Loki, Grafana –∏ /health –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "üß† Verifying Stage6 monitoring stack..."
	@sleep 20
	@echo "\nüîç Checking Prometheus targets..."
	@curl -s http://localhost:9095/api/v1/targets | grep -q '"health":"up"' && echo "‚úÖ Prometheus targets are UP" || (echo "‚ùå Prometheus not responding"; exit 1)
	@echo "\nüîç Checking Loki API..."
	@curl -s http://localhost:3100/loki/api/v1/status/buildinfo | grep -q '"status":"success"' && echo "‚úÖ Loki is reachable" || (echo "‚ùå Loki not reachable"; exit 1)
	@echo "\nüîç Checking Grafana availability..."
	@curl -s -o /dev/null -w "%{http_code}" http://localhost:3030 | grep -q "200" && echo "‚úÖ Grafana is online at http://localhost:3030" || (echo "‚ùå Grafana not reachable"; exit 1)
	@echo "\nüîç Checking microservices health endpoints..."
	@for svc in calc-service risk-engine doc-service embedding-api gateway web-ui etl-service billing-service; do \
		NAME=$$(docker ps --format '{{.Names}}' | grep $$svc || true); \
		if [ -n "$$NAME" ]; then \
			PORT=$$(docker port $$NAME 2>/dev/null | grep -oP '0.0.0.0:\K\d+' | head -1); \
			if [ -n "$$PORT" ]; then \
				if curl -sf http://localhost:$$PORT/health > /dev/null; then \
					echo "‚úÖ $$svc healthy on port $$PORT"; \
				else \
					echo "‚ö†Ô∏è  $$svc not responding on port $$PORT"; \
				fi; \
			fi; \
		fi; \
	done
	@echo "\nüü¢ All critical services verified."

stage6-status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –º–µ—Ç—Ä–∏–∫ Prometheus/Grafana
	@echo "=== Containers Status ==="
	@docker ps --filter "name=zakupai" --format "table {{.Names}}\t{{.Status}}" | head -20
	@echo ""
	@echo "=== Prometheus Targets ==="
	@docker exec zakupai-prometheus wget -qO- http://localhost:9090/api/v1/targets 2>/dev/null | jq -r '.data.activeTargets | length as $$total | map(select(.health=="up")) | length as $$up | "\($$up)/\($$total) targets UP"' || echo "‚ùå Prometheus not accessible"
	@echo ""
	@echo "=== Grafana Dashboard ==="
	@curl -s -u admin:admin 'http://localhost:3030/api/dashboards/uid/zakupai-overview' 2>/dev/null | jq -r '"Dashboard: " + .dashboard.title + " (" + (.dashboard.panels | length | tostring) + " panels)"' || echo "‚ùå Grafana not accessible"
