name: ci

on:
  push: {}
  pull_request: {}

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          pip install ruff black bandit

      - name: Ruff (lint)
        run: ruff check .

      - name: Black (format check)
        run: black --check .

      - name: Bandit (security check)
        run: bandit -r . -f json || true

  compose_sanity:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Docker Compose config
        run: docker compose config -q

  build:
    runs-on: ubuntu-latest
    needs: precommit
    concurrency:
      group: ci-build-${{ github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        svc: ["calc-service", "risk-engine", "doc-service", "embedding-api", "etl-service"]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Build ${{ matrix.svc }}
        uses: docker/build-push-action@v6
        with:
          context: ./services/${{ matrix.svc }}
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  precommit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml', '**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-
      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
      - name: Run pre-commit
        run: pre-commit run --all-files

  migrate:
    runs-on: ubuntu-latest
    needs: precommit
    steps:
      - uses: actions/checkout@v4
      - name: Start database
        run: docker compose up -d db
      - name: Run migrations
        run: docker compose run --rm migrator
      - name: Stop containers
        run: docker compose down

  pytest:
    runs-on: ubuntu-latest
    needs: migrate
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          find services -name requirements.txt -exec pip install -r {} \;
          pip install pytest
      - name: Run tests
        run: make test

  smoke-matrix:
    runs-on: ubuntu-latest
    needs: [migrate, build]
    strategy:
      matrix:
        service: [calc, risk, doc, emb]
    steps:
      - uses: actions/checkout@v4
      - name: Start db
        run: docker compose up -d db
      - name: Start ${{ matrix.service }} service
        run: |
          case "${{ matrix.service }}" in
            calc) docker compose up -d calc-service ;;
            risk) docker compose up -d risk-engine ;;
            doc) docker compose up -d doc-service ;;
            emb) docker compose up -d embedding-api ;;
          esac
      - name: Wait for service health
        run: |
          case "${{ matrix.service }}" in
            calc) port=8001 ;;
            risk) port=8002 ;;
            doc) port=8003 ;;
            emb) port=8004 ;;
          esac
          timeout 90 bash -c "until curl -fsS http://localhost:$port/health; do sleep 3; done"
      - name: Run smoke test
        run: bash scripts/smoke.sh

  etl-smoke-test:
    runs-on: ubuntu-latest
    needs: migrate
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-etl-${{ hashFiles('services/etl-service/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-etl-
      - name: Start database
        run: docker compose up -d db
      - name: Wait for database
        run: timeout 60 bash -c "until docker compose exec db pg_isready -U zakupai; do sleep 2; done"
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          cd services/etl-service
          pip install psycopg2-binary python-dotenv
      - name: Run ETL smoke test
        run: |
          cd services/etl-service
          chmod +x smoke_test.sh
          ./smoke_test.sh
        env:
          PGPASSWORD: zakupai
      - name: Upload smoke test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: etl-smoke-test-logs
          path: |
            services/etl-service/smoke_test.log
            services/etl-service/ocr_loader.log
          retention-days: 7

  etl-upload-test:
    runs-on: ubuntu-latest
    needs: migrate
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-etl-${{ hashFiles('services/etl-service/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-etl-
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr tesseract-ocr-rus tesseract-ocr-eng
      - name: Start database
        run: docker compose up -d db
      - name: Wait for database
        run: timeout 60 bash -c "until docker compose exec db pg_isready -U zakupai; do sleep 2; done"
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          cd services/etl-service
          pip install -r requirements.txt
      - name: Run Alembic migrations
        run: |
          cd services/etl-service
          python -m alembic upgrade head
        env:
          DATABASE_URL: postgresql://zakupai:zakupai@localhost:5432/zakupai
      - name: Run ETL upload tests (pytest)
        run: |
          cd services/etl-service
          python -m pytest test_upload.py -v
        env:
          DATABASE_URL: postgresql://zakupai:zakupai@localhost:5432/zakupai
      - name: Build ETL service container
        run: |
          cd services/etl-service
          docker build -t zakupai-etl-service .
      - name: Run integration tests
        run: |
          cd services/etl-service
          bash test_etl_upload.sh
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: etl-upload-test-logs
          path: |
            services/etl-service/test_files/
          retention-days: 7

  priority3-integration:
    runs-on: ubuntu-latest
    needs: migrate
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-priority3-${{ hashFiles('services/etl-service/requirements.txt', 'services/embedding-api/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-priority3-
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr tesseract-ocr-rus tesseract-ocr-eng
      - name: Start required services
        run: docker compose up -d db chromadb embedding-api etl-service goszakup-api n8n
      - name: Wait for services to be ready
        run: |
          timeout 90 bash -c "until docker compose exec db pg_isready -U zakupai; do sleep 2; done"
          timeout 90 bash -c "until curl -fsS http://localhost:8010/api/v2/heartbeat 2>/dev/null; do sleep 2; done"
          timeout 90 bash -c "until curl -fsS http://localhost:7010/health 2>/dev/null; do sleep 2; done"
          timeout 90 bash -c "until curl -fsS http://localhost:7011/health 2>/dev/null; do sleep 2; done"
          timeout 90 bash -c "until curl -fsS http://localhost:7005/health 2>/dev/null; do sleep 2; done"
          timeout 90 bash -c "until curl -fsS http://localhost:5678 2>/dev/null; do sleep 2; done"
      - name: Run ETL migrations
        run: make etl-migrate
        env:
          DATABASE_URL: postgresql://zakupai:zakupai@localhost:5432/zakupai
      - name: Run Priority 3 E2E tests
        run: make test-priority3
        env:
          DATABASE_URL: postgresql://zakupai:zakupai@localhost:5432/zakupai
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: priority3-test-logs
          path: |
            services/etl-service/test_files/
            services/etl-service/*.log
          retention-days: 7
      - name: Stop all containers
        if: always()
        run: docker compose down

  web-ui-integration:
    runs-on: ubuntu-latest
    needs: migrate
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-web-ui-${{ hashFiles('web/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-web-ui-
      - name: Start required services for web-ui
        run: docker compose up -d db etl-service
        env:
          GOSZAKUP_TOKEN: ${{ secrets.GOSZAKUP_TOKEN || 'test_token_for_ci' }}
          GOSZAKUP_BASE: https://ows.goszakup.gov.kz
      - name: Wait for services to be ready
        run: |
          timeout 60 bash -c "until docker compose exec db pg_isready -U zakupai; do sleep 2; done"
          timeout 60 bash -c "until curl -fsS http://localhost:7011/health 2>/dev/null; do sleep 2; done"
      - name: Build web-ui service
        run: |
          cd web
          docker build -t zakupai-web-ui .
      - name: Run web-ui service
        run: |
          docker run -d --name zakupai-web-ui-test \
            --network zakupai_zakupai-network \
            -p 8082:8000 \
            -e GOSZAKUP_TOKEN="${{ secrets.GOSZAKUP_TOKEN || 'test_token_for_ci' }}" \
            -e GOSZAKUP_BASE=https://ows.goszakup.gov.kz \
            -e ETL_SERVICE_URL=http://etl-service:8000 \
            zakupai-web-ui
      - name: Wait for web-ui to be ready
        run: |
          timeout 60 bash -c "until curl -fsS http://localhost:8082/health 2>/dev/null; do sleep 2; done"
      - name: Test web-ui endpoints
        run: |
          echo "Testing /health endpoint"
          curl -fsS http://localhost:8082/health | jq '.'

          echo "Testing /lots endpoint"
          response=$(curl -s -w '%{http_code}' http://localhost:8082/lots -o /tmp/lots_response.json)
          if [[ "$response" == "200" ]]; then
            echo "✅ /lots endpoint returned HTTP 200"
            cat /tmp/lots_response.json | jq '.' | head -20
          elif [[ "$response" == "500" ]]; then
            echo "⚠️ /lots endpoint returned HTTP 500 (expected if GOSZAKUP_TOKEN is invalid)"
            cat /tmp/lots_response.json
          else
            echo "❌ /lots endpoint returned HTTP $response"
            cat /tmp/lots_response.json
            exit 1
          fi
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: web-ui-test-logs
          path: |
            /tmp/lots_response.json
          retention-days: 7
      - name: Stop all containers
        if: always()
        run: |
          docker stop zakupai-web-ui-test || true
          docker rm zakupai-web-ui-test || true
          docker compose down

  webui-e2e-test:
    runs-on: ubuntu-latest
    needs: migrate
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-webui-${{ hashFiles('web/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-webui-
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq tesseract-ocr tesseract-ocr-rus tesseract-ocr-eng
      - name: Start required services
        run: docker compose up -d db goszakup-api etl-service chromadb web-ui
        env:
          GOSZAKUP_TOKEN: test_token_for_ci
          GOSZAKUP_BASE: https://ows.goszakup.gov.kz
      - name: Wait for services to be ready
        run: |
          timeout 90 bash -c "until docker compose exec db pg_isready -U zakupai; do sleep 2; done"
          timeout 90 bash -c "until curl -fsS http://localhost:8010/api/v2/heartbeat 2>/dev/null; do sleep 2; done"
          timeout 90 bash -c "until curl -fsS http://localhost:7010/health 2>/dev/null; do sleep 2; done"
          timeout 90 bash -c "until curl -fsS http://localhost:7011/health 2>/dev/null; do sleep 2; done"
          timeout 90 bash -c "until curl -fsS http://localhost:7005/health 2>/dev/null; do sleep 2; done"
          timeout 90 bash -c "until curl -fsS http://localhost:8082/health 2>/dev/null; do sleep 2; done"
      - name: Check and create test fixture if missing
        run: |
          if [ ! -f web/test_fixtures/scan1.pdf ]; then
            echo "Creating dummy PDF fixture with Cyrillic content..."
            mkdir -p web/test_fixtures
            python3 -c "
            from reportlab.pdfgen import canvas
            import io
            pdf_buffer = io.BytesIO()
            c = canvas.Canvas(pdf_buffer)
            c.drawString(100, 750, 'Тестовый документ для OCR')
            c.drawString(100, 720, 'Содержит информацию об иске о закупке лака')
            c.drawString(100, 690, 'Для тестирования поиска по ключевому слову \"иск\"')
            c.showPage()
            c.save()
            with open('web/test_fixtures/scan1.pdf', 'wb') as f:
                f.write(pdf_buffer.getvalue())
            "
          else
            echo "Test fixture scan1.pdf already exists"
          fi
        env:
          PYTHONPATH: .
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          cd web
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx reportlab
      - name: Run ETL migrations
        run: make etl-migrate
        env:
          DATABASE_URL: postgresql://zakupai:zakupai@localhost:5432/zakupai
      - name: Run Web UI E2E tests
        run: make webui-test
        env:
          DATABASE_URL: postgresql://zakupai:zakupai@localhost:5432/zakupai
      - name: Save test results
        if: always()
        run: |
          mkdir -p test_results
          if [ -f web/test_results.xml ]; then
            cp web/test_results.xml test_results/
          fi
          docker compose logs web-ui > test_results/webui.log 2>&1 || true
          docker compose logs etl-service > test_results/etl.log 2>&1 || true
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: webui-e2e-test-results
          path: |
            test_results/
            web/test_fixtures/
          retention-days: 7
      - name: Stop all containers
        if: always()
        run: docker compose down

  bandit-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install bandit
        run: pip install bandit
      - name: Run bandit (SARIF)
        run: bandit -q -r services -f sarif -o bandit.sarif
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif
