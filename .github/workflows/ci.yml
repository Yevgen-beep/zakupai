name: ci

on:
  push: {}
  pull_request: {}

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          pip install ruff black

      - name: Ruff (lint)
        run: ruff check services

      - name: Black (format check)
        run: black --check services

  compose_sanity:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Docker Compose config
        run: docker compose config -q

  build:
    runs-on: ubuntu-latest
    needs: precommit
    concurrency:
      group: ci-build-${{ github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        svc: ["calc-service", "risk-engine", "doc-service", "embedding-api"]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Build ${{ matrix.svc }}
        uses: docker/build-push-action@v6
        with:
          context: ./services/${{ matrix.svc }}
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  precommit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml', '**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-
      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
      - name: Run pre-commit
        run: pre-commit run --all-files

  migrate:
    runs-on: ubuntu-latest
    needs: precommit
    steps:
      - uses: actions/checkout@v4
      - name: Start database
        run: docker compose up -d db
      - name: Run migrations
        run: docker compose run --rm migrator
      - name: Stop containers
        run: docker compose down

  pytest:
    runs-on: ubuntu-latest
    needs: migrate
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          find services -name requirements.txt -exec pip install -r {} \;
          pip install pytest
      - name: Run tests
        run: make test

  smoke-matrix:
    runs-on: ubuntu-latest
    needs: [migrate, build]
    strategy:
      matrix:
        service: [calc, risk, doc, emb]
    steps:
      - uses: actions/checkout@v4
      - name: Start db
        run: docker compose up -d db
      - name: Start ${{ matrix.service }} service
        run: |
          case "${{ matrix.service }}" in
            calc) docker compose up -d calc-service ;;
            risk) docker compose up -d risk-engine ;;
            doc) docker compose up -d doc-service ;;
            emb) docker compose up -d embedding-api ;;
          esac
      - name: Wait for service health
        run: |
          case "${{ matrix.service }}" in
            calc) port=8001 ;;
            risk) port=8002 ;;
            doc) port=8003 ;;
            emb) port=8004 ;;
          esac
          timeout 90 bash -c "until curl -fsS http://localhost:$port/health; do sleep 3; done"
      - name: Run smoke test
        run: bash scripts/smoke.sh

  bandit-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install bandit
        run: pip install bandit
      - name: Run bandit (SARIF)
        run: bandit -q -r services -f sarif -o bandit.sarif
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif
