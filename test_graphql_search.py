#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ GraphQL –ø–æ–∏—Å–∫–∞ –ø–æ —Å–ª–æ–≤—É "–ª–∞–∫"
"""

import asyncio
import json
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é –±–æ—Ç–∞
sys.path.append(str(Path(__file__).parent / "bot"))

from goszakup_graphql import GoszakupGraphQLClient, format_search_results


async def test_graphql_search():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GraphQL –ø–æ–∏—Å–∫–∞"""

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv("GOSZAKUP_TOKEN")
    if not token:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω GOSZAKUP_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω: export GOSZAKUP_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω'")
        return

    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ GraphQL API")
    print("=" * 60)

    client = GoszakupGraphQLClient(token)

    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_keywords = ["–ª–∞–∫", "—É–≥–æ–ª—å", "–º–µ–±–µ–ª—å", "–±—É–º–∞–≥–∞", "–º–æ–ª–æ–∫–æ"]

    for keyword in test_keywords:
        print(f"\nüîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: '{keyword}'")
        print("-" * 40)

        try:
            # –¢–µ—Å—Ç GraphQL –ø–æ–∏—Å–∫–∞
            results = await client.search_lots(keyword, limit=3, use_graphql=True)

            if results:
                print(f"‚úÖ GraphQL: –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                formatted = format_search_results(results)
                print(formatted[:500] + "..." if len(formatted) > 500 else formatted)
            else:
                print("‚ö†Ô∏è GraphQL: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

                # –ü–æ–ø—Ä–æ–±—É–µ–º REST fallback
                print("\nüîÑ –ü—Ä–æ–±—É–µ–º REST fallback...")
                try:
                    rest_results = await client.search_lots(
                        keyword, limit=3, use_graphql=False
                    )
                    if rest_results:
                        print(f"‚úÖ REST: –ù–∞–π–¥–µ–Ω–æ {len(rest_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                        formatted = format_search_results(rest_results)
                        print(
                            formatted[:500] + "..."
                            if len(formatted) > 500
                            else formatted
                        )
                    else:
                        print("‚ö†Ô∏è REST: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                except Exception as e:
                    print(f"‚ùå REST fallback –æ—à–∏–±–∫–∞: {e}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

        print("\n" + "=" * 60)


def test_query_structure():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã GraphQL –∑–∞–ø—Ä–æ—Å–∞"""
    print("\nüìã –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ GraphQL –∑–∞–ø—Ä–æ—Å–∞:")
    print("-" * 50)

    query = """
    query SearchLots($filter: LotsFiltersInput) {
      Lots(filter: $filter) {
        id
        lotNumber
        nameRu
        descriptionRu
        amount
        count
        customerNameRu
        customerBin
        trdBuyNumberAnno
        TrdBuy {
          id
          nameRu
          numberAnno
          orgNameRu
          orgBin
          RefTradeMethods {
            nameRu
          }
        }
        RefLotsStatus {
          nameRu
        }
      }
    }
    """

    variables = {"filter": {"nameRu": "–ª–∞–∫", "nameDescriptionRu": "–ª–∞–∫"}}

    payload = {"query": query, "variables": variables}

    print("GraphQL Query:")
    print(json.dumps(payload, ensure_ascii=False, indent=2))

    print("\nüîó URL: https://ows.goszakup.gov.kz/v2/graphql")
    print("üîë Headers:")
    print("  - Authorization: Bearer <YOUR_TOKEN>")
    print("  - Content-Type: application/json")
    print("  - User-Agent: ZakupAI-Bot/1.0")


def show_comparison():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ GraphQL vs REST –ø–æ–¥—Ö–æ–¥–æ–≤"""
    print("\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ GraphQL v2 vs REST v3:")
    print("=" * 60)

    print("üöÄ GraphQL v2 API (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç):")
    print("  ‚úÖ –ì–∏–±–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ LotsFiltersInput")
    print("  ‚úÖ –¢–æ—á–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Å—Ö–µ–º—ã: nameRu, nameDescriptionRu")
    print("  ‚úÖ –°–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: TrdBuy, RefLotsStatus, RefTradeMethods")
    print("  ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ - —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è")
    print("  ‚úÖ –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")

    print("\nüîÑ REST v3 API (Fallback):")
    print("  ‚ö†Ô∏è –ú–µ–Ω–µ–µ –≥–∏–±–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è")
    print("  ‚ö†Ô∏è –ë–æ–ª—å—à–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("  ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞")
    print("  ‚úÖ –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print("  ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–∞–∫ fallback")


def integration_guide():
    """–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\nüîß –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
    print("=" * 60)

    print("1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    print("   pip install aiohttp")

    print("\n2. –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è:")
    print(
        "   from bot.goszakup_graphql import GoszakupGraphQLClient, format_search_results"
    )

    print("\n3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞:")
    print("   client = GoszakupGraphQLClient(token='your_token')")

    print("\n4. –ü–æ–∏—Å–∫ –ª–æ—Ç–æ–≤:")
    print("   results = await client.search_lots('–ª–∞–∫', limit=10)")
    print("   formatted_text = format_search_results(results)")

    print("\n5. –î–ª—è Telegram –±–æ—Ç–∞:")
    print("   await bot.send_message(chat_id, formatted_text, parse_mode='Markdown')")

    print("\n6. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("   export GOSZAKUP_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω_api'")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("ü§ñ ZakupAI - GraphQL Search –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("=" * 60)

    show_comparison()
    test_query_structure()
    integration_guide()

    if os.getenv("GOSZAKUP_TOKEN"):
        print("\nüîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ–∏—Å–∫–∞...")
        await test_graphql_search()
    else:
        print("\n‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∂–∏–≤—ã–µ —Ç–µ—Å—Ç—ã")
        print("–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export GOSZAKUP_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω'")


if __name__ == "__main__":
    asyncio.run(main())
