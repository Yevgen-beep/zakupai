#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 1:
- API Gateway —Å–µ—Ä–≤–∏—Å
- ChromaDB + embedding-api
- –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–Ω–¥–µ—Ä–∞–º
"""

import asyncio

import aiohttp


class Priority1Tester:
    """–¢–µ—Å—Ç–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 1"""

    def __init__(self):
        self.gateway_url = "http://localhost:7005"
        self.embedding_url = "http://localhost:7010"
        self.chromadb_url = "http://localhost:8010"

    async def test_goszakup_api_gateway(self):
        """–¢–µ—Å—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ API Gateway"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Goszakup API Gateway...")

        test_cases = [
            {
                "name": "GraphQL –ø–æ–∏—Å–∫",
                "params": {"keyword": "–ª–∞–∫", "limit": 3, "api_version": "graphql_v2"},
            },
            {
                "name": "REST –ø–æ–∏—Å–∫",
                "params": {"keyword": "–º–µ–±–µ–ª—å", "limit": 3, "api_version": "rest_v3"},
            },
            {
                "name": "–ê–≤—Ç–æ-–≤—ã–±–æ—Ä API",
                "params": {"keyword": "–∫–æ–º–ø—å—é—Ç–µ—Ä", "limit": 5, "api_version": "auto"},
            },
        ]

        async with aiohttp.ClientSession() as session:
            for case in test_cases:
                try:
                    print(f"  üìã {case['name']}...")

                    async with session.get(
                        f"{self.gateway_url}/search", params=case["params"], timeout=30
                    ) as resp:
                        if resp.status == 200:
                            data = await resp.json()
                            print(f"    ‚úÖ API: {data.get('api_used')}")
                            print(f"    üìä –ù–∞–π–¥–µ–Ω–æ: {data.get('total_found')} –ª–æ—Ç–æ–≤")
                            print(f"    ‚è±Ô∏è –í—Ä–µ–º—è: {data.get('query_time_ms')}–º—Å")
                        else:
                            print(f"    ‚ùå –û—à–∏–±–∫–∞: {resp.status}")

                except Exception as e:
                    print(f"    ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

    async def test_chromadb_integration(self):
        """–¢–µ—Å—Ç ChromaDB –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ChromaDB –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")

        async with aiohttp.ClientSession() as session:
            # 1. –¢–µ—Å—Ç v2 heartbeat
            print("  üíì –ü—Ä–æ–≤–µ—Ä–∫–∞ v2 heartbeat...")
            try:
                async with session.get(f"{self.chromadb_url}/api/v2/heartbeat") as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        print(
                            f"    ‚úÖ ChromaDB v2 heartbeat: {data.get('nanosecond heartbeat', 'OK')}"
                        )
                    else:
                        print(f"    ‚ùå –û—à–∏–±–∫–∞ heartbeat: {resp.status}")
            except Exception as e:
                print(f"    ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ heartbeat: {e}")

            # 2. –°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π
            print("  üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π...")
            try:
                async with session.get(
                    f"{self.embedding_url}/chroma/collections"
                ) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {data.get('count', 0)}")
                    else:
                        print(f"    ‚ùå –û—à–∏–±–∫–∞: {resp.status}")
            except Exception as e:
                print(f"    ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

            # 2. –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            print("  üìù –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ—Ç–æ–≤...")
            test_lots = [
                {
                    "document_id": "lot_001",
                    "text": "–ó–∞–∫—É–ø–∫–∞ –æ—Ñ–∏—Å–Ω–æ–π –º–µ–±–µ–ª–∏: —Å—Ç–æ–ª—ã, —Å—Ç—É–ª—å—è, —à–∫–∞—Ñ—ã –¥–ª—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è",
                    "metadata": {
                        "lot_number": "001",
                        "amount": 500000,
                        "customer": "–ì–£ –ê–ª–º–∞—Ç—ã",
                    },
                },
                {
                    "document_id": "lot_002",
                    "text": "–ü–æ—Å—Ç–∞–≤–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏: –Ω–æ—É—Ç–±—É–∫–∏, –º–æ–Ω–∏—Ç–æ—Ä—ã, –ø—Ä–∏–Ω—Ç–µ—Ä—ã",
                    "metadata": {
                        "lot_number": "002",
                        "amount": 1200000,
                        "customer": "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
                    },
                },
                {
                    "document_id": "lot_003",
                    "text": "–†–µ–º–æ–Ω—Ç –∏ –ø–æ–∫—Ä–∞—Å–∫–∞ —Ñ–∞—Å–∞–¥–∞ –∑–¥–∞–Ω–∏—è –ª–∞–∫–æ–∫—Ä–∞—Å–æ—á–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏",
                    "metadata": {
                        "lot_number": "003",
                        "amount": 800000,
                        "customer": "–ê–∫–∏–º–∞—Ç",
                    },
                },
            ]

            for lot in test_lots:
                try:
                    async with session.post(
                        f"{self.embedding_url}/chroma/index",
                        json={"collection_name": "test_lots", **lot},
                    ) as resp:
                        if resp.status == 200:
                            print(f"    ‚úÖ –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω: {lot['document_id']}")
                        else:
                            print(
                                f"    ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ {lot['document_id']}: {resp.status}"
                            )
                except Exception as e:
                    print(f"    ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")

            # 3. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
            print("  üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
            search_queries = [
                "–æ—Ñ–∏—Å–Ω–∞—è –º–µ–±–µ–ª—å",
                "–∫–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∞",
                "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
                "–ª–∞–∫ –∏ –∫—Ä–∞—Å–∫–∞",
            ]

            for query in search_queries:
                try:
                    async with session.post(
                        f"{self.embedding_url}/chroma/search",
                        json={
                            "collection_name": "test_lots",
                            "query": query,
                            "top_k": 3,
                        },
                    ) as resp:
                        if resp.status == 200:
                            data = await resp.json()
                            print(f"    üîç –ó–∞–ø—Ä–æ—Å: '{query}'")
                            print(
                                f"    üìä –ù–∞–π–¥–µ–Ω–æ: {data.get('total_found')} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                            )

                            for result in data.get("results", [])[:2]:
                                score = result.get("score", 0)
                                text = result.get("text", "")[:60] + "..."
                                print(f"      üìÑ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.3f} - {text}")
                        else:
                            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ '{query}': {resp.status}")
                except Exception as e:
                    print(f"    ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")

    async def test_integration_pipeline(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: –ø–æ–∏—Å–∫ ‚Üí –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è ‚Üí —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫"""
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")

        async with aiohttp.ClientSession() as session:
            # 1. –ü–æ–∏—Å–∫ –ª–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ API Gateway
            print("  1Ô∏è‚É£ –ü–æ–∏—Å–∫ –ª–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ API Gateway...")
            try:
                async with session.get(
                    f"{self.gateway_url}/search",
                    params={"keyword": "–º–µ–±–µ–ª—å", "limit": 2},
                ) as resp:
                    if resp.status == 200:
                        search_data = await resp.json()
                        lots = search_data.get("results", [])
                        print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ API: {len(lots)}")

                        # 2. –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤ –≤ ChromaDB
                        print("  2Ô∏è‚É£ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤ ChromaDB...")
                        for i, lot in enumerate(lots[:2]):
                            index_data = {
                                "collection_name": "live_lots",
                                "document_id": f"live_{lot.get('lot_number', f'unknown_{i}')}",
                                "text": f"{lot.get('name_ru', '')} {lot.get('description_ru', '')}",
                                "metadata": {
                                    "lot_number": lot.get("lot_number"),
                                    "amount": lot.get("amount"),
                                    "customer": lot.get("customer_name"),
                                    "source": lot.get("source"),
                                },
                            }

                            async with session.post(
                                f"{self.embedding_url}/chroma/index", json=index_data
                            ) as index_resp:
                                if index_resp.status == 200:
                                    print(
                                        f"    ‚úÖ –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω –ª–æ—Ç: {index_data['document_id']}"
                                    )

                        # 3. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
                        print("  3Ô∏è‚É£ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫...")
                        async with session.post(
                            f"{self.embedding_url}/chroma/search",
                            json={
                                "collection_name": "live_lots",
                                "query": "–æ—Ñ–∏—Å–Ω–∞—è –º–µ–±–µ–ª—å —Å—Ç–æ–ª—ã —Å—Ç—É–ª—å—è",
                                "top_k": 3,
                            },
                        ) as search_resp:
                            if search_resp.status == 200:
                                semantic_data = await search_resp.json()
                                print(
                                    f"    ‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: {semantic_data.get('total_found')} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                                )
                            else:
                                print(
                                    f"    ‚ùå –û—à–∏–±–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞: {search_resp.status}"
                                )
                    else:
                        print(f"    ‚ùå –û—à–∏–±–∫–∞ API Gateway: {resp.status}")
            except Exception as e:
                print(f"    ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ: {e}")

    async def check_services_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")

        services = [
            ("Goszakup API Gateway", f"{self.gateway_url}/health"),
            ("Embedding API", f"{self.embedding_url}/health"),
            ("ChromaDB", f"{self.chromadb_url}/api/v2/heartbeat"),
        ]

        async with aiohttp.ClientSession() as session:
            for name, url in services:
                try:
                    async with session.get(url, timeout=10) as resp:
                        if resp.status == 200:
                            print(f"  ‚úÖ {name}: OK")
                        else:
                            print(f"  ‚ùå {name}: {resp.status}")
                except Exception as e:
                    print(f"  ‚ùå {name}: {e}")

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 1\n")

        await self.check_services_health()
        await self.test_goszakup_api_gateway()
        await self.test_chromadb_integration()
        await self.test_integration_pipeline()

        print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = Priority1Tester()
    await tester.run_all_tests()


if __name__ == "__main__":
    asyncio.run(main())
